{"version":3,"sources":["../static/js/2.481f7fdd.chunk.js","../node_modules/monaco-editor/esm/vs/language/json/jsonMode.js","../node_modules/monaco-editor/esm/vs/language/json/_deps/jsonc-parser/impl/scanner.js","../node_modules/monaco-editor/esm/vs/language/json/_deps/jsonc-parser/impl/format.js","../node_modules/monaco-editor/esm/vs/language/json/_deps/jsonc-parser/impl/parser.js","../node_modules/monaco-editor/esm/vs/language/json/workerManager.js","../node_modules/monaco-editor/esm/vs/language/json/languageFeatures.js","../node_modules/monaco-editor/esm/vs/language/json/_deps/vscode-languageserver-types/main.js","../node_modules/monaco-editor/esm/vs/language/json/tokenization.js","../node_modules/monaco-editor/esm/vs/language/json/_deps/jsonc-parser/main.js","../node_modules/monaco-editor/esm/vs/language/json/_deps/jsonc-parser/impl/edit.js"],"names":["webpackJsonp","670","module","__webpack_exports__","__webpack_require__","setupMode","defaults","disposables","client","__WEBPACK_IMPORTED_MODULE_0__workerManager_js__","push","worker","uris","_i","arguments","length","getLanguageServiceWorker","apply","languageId","monaco","languages","registerCompletionItemProvider","__WEBPACK_IMPORTED_MODULE_1__languageFeatures_js__","registerHoverProvider","registerDocumentSymbolProvider","registerDocumentFormattingEditProvider","registerDocumentRangeFormattingEditProvider","setTokensProvider","Object","__WEBPACK_IMPORTED_MODULE_2__tokenization_js__","setLanguageConfiguration","richEditConfiguration","defineProperty","value","wordPattern","comments","lineComment","blockComment","brackets","autoClosingPairs","open","close","notIn","746","createScanner","text","ignoreTrivia","scanHexDigits","count","exact","digits","ch","charCodeAt","pos","setPosition","newPosition","tokenOffset","token","scanError","scanNumber","start","isDigit","substring","end","scanString","result","len","isLineBreak","ch_1","String","fromCharCode","scanNext","code","isWhiteSpace","commentClosed","isUnknownContentCharacter","scanNextNonTrivia","getPosition","scan","getToken","getTokenValue","getTokenOffset","getTokenLength","getTokenError","788","format","documentText","range","options","newLineAndIndent","eol","repeat","indentValue","initialIndentLevel","indentLevel","scanner","lineBreak","hasError","addEdit","startOffset","endOffset","rangeEnd","rangeStart","editOperations","offset","content","formatText","formatTextStart","isEOL","computeIndentLevel","getEOL","insertSpaces","tabSize","__WEBPACK_IMPORTED_MODULE_0__scanner_js__","firstToken","firstTokenStart","firstTokenEnd","secondToken","replaceContent","s","i","nChars","charAt","Math","floor","indexOf","789","getLocation","position","setPreviousNode","type","previousNodeInst","columnOffset","previousNode","segments","earlyReturnException","isAtPropertyKey","visit","onObjectBegin","onObjectProperty","name","onObjectEnd","pop","onArrayBegin","onArrayEnd","onLiteralValue","getLiteralNodeType","onSeparator","sep","last","e","path","matches","pattern","k","parse","errors","onValue","Array","isArray","currentParent","currentProperty","previousParents","object","array","onError","error","parseTree","ensurePropertyComplete","parent","valueNode","children","findNodeAtLocation","root","node","path_1","segment","found","_a","_b","propertyNode","index","getNodeValue","map","obj","create","prop","visitor","toNoArgVisit","visitFunction","_scanner","toOneArgVisit","arg","handleError","disallowComments","onComment","skipUntilAfter","skipUntil","parseString","isValue","parseLiteral","JSON","parseProperty","parseValue","parseObject","needsComma","allowTrailingComma","parseArray","stripComments","replaceCh","kind","parts","replace","join","893","toShallowCancelPromise","p","completeCallback","errorCallback","r","Promise","c","then","d","WorkerManager","_this","this","_defaults","_worker","_idleCheckInterval","setInterval","_checkIfIdle","_lastUsedTime","_configChangeListener","onDidChange","_stopWorker","prototype","dispose","_client","clearInterval","Date","now","_getClient","editor","createWebWorker","moduleId","label","createData","languageSettings","diagnosticsOptions","getProxy","resources","_","withSyncedResources","894","toSeverity","lsSeverity","__WEBPACK_IMPORTED_MODULE_0__deps_vscode_languageserver_types_main_js__","Error","MarkerSeverity","Warning","Information","Info","Hint","toDiagnostics","resource","diag","severity","startLineNumber","line","startColumn","character","endLineNumber","endColumn","message","source","fromPosition","column","lineNumber","fromRange","getStartPosition","getEndPosition","toRange","Range","toCompletionItemKind","mItemKind","CompletionItemKind","Text","Method","Function","Constructor","Field","Variable","Class","Interface","Module","Property","Unit","Value","Enum","Keyword","Snippet","Color","File","Reference","toTextEdit","textEdit","newText","isMarkupContent","thing","toMarkdownString","entry","language","toMarkedStringArray","contents","toLocation","location","uri","Uri","toSymbolKind","mKind","SymbolKind","Namespace","Package","Constant","Number","Boolean","fromFormattingOptions","wireCancellationToken","promise","cancel","onCancellationRequested","DiagnostcsAdapter","CompletionAdapter","HoverAdapter","DocumentSymbolAdapter","DocumentFormattingEditProvider","DocumentRangeFormattingEditProvider","_languageId","_disposables","_listener","onModelAdd","model","modeId","getModeId","handle","toString","onDidChangeContent","clearTimeout","setTimeout","_doValidate","onModelRemoved","setModelMarkers","uriStr","listener","onDidCreateModel","onWillDisposeModel","_resetSchema","onDidChangeModelLanguage","event","key","getModels","forEach","resetSchema","doValidation","diagnostics","markers","getModel","undefined","err","console","get","enumerable","configurable","provideCompletionItems","getWordUntilPosition","doComplete","info","items","item","insertText","sortText","filterText","documentation","detail","insertTextFormat","isIncomplete","provideHover","doHover","provideDocumentSymbols","findDocumentSymbols","containerName","provideDocumentFormattingEdits","edits","provideDocumentRangeFormattingEdits","895","DiagnosticSeverity","TextEdit","MarkupKind","InsertTextFormat","Position","is","candidate","Is","defined","number","one","two","three","four","Location","string","Diagnostic","Command","title","command","args","insert","del","TextDocumentEdit","textDocument","VersionedTextDocumentIdentifier","TextDocumentIdentifier","TextEditChangeImpl","delete","add","edit","all","clear","splice","WorkspaceChange","workspaceEdit","_textEditChanges","_workspaceEdit","documentChanges","textDocumentEdit","textEditChange","changes","keys","getTextEditChange","version","TextDocumentItem","PlainText","Markdown","Folder","EnumMember","Struct","Event","Operator","TypeParameter","CompletionItem","CompletionList","MarkedString","fromPlainText","plainText","ParameterInformation","SignatureInformation","parameters","DocumentHighlightKind","Read","Write","DocumentHighlight","Key","Null","SymbolInformation","CodeActionContext","typedArray","CodeLens","data","FormattingOptions","boolean","DocumentLink","target","TextDocument","FullTextDocument","lineCount","func","getText","positionAt","offsetAt","applyEdits","document","sortedEdits","mergeSort","a","b","lastModifiedOffset","compare","left","slice","right","leftIdx","rightIdx","ret","TextDocumentSaveReason","Manual","AfterDelay","FocusOut","_uri","_version","_content","_lineOffsets","update","getLineOffsets","lineOffsets","isLineStart","max","min","low","high","mid","lineOffset","nextLineOffset","call","check","every","896","createTokenizationSupport","supportComments","getInitialState","JSONState","tokenize","state","offsetDelta","stopAtOffset","numberOfInsertedCharacters","adjustOffset","__WEBPACK_IMPORTED_MODULE_0__deps_jsonc_parser_main_js__","lastWasColon","tokens","endState","clone","substr","TOKEN_DELIM_OBJECT","TOKEN_DELIM_ARRAY","TOKEN_DELIM_COLON","TOKEN_DELIM_COMMA","TOKEN_VALUE_BOOLEAN","TOKEN_VALUE_NULL","TOKEN_VALUE_STRING","TOKEN_PROPERTY_NAME","TOKEN_VALUE_NUMBER","TOKEN_COMMENT_LINE","TOKEN_COMMENT_BLOCK","getStateData","startIndex","scopes","_state","equals","other","setStateData","897","__WEBPACK_IMPORTED_MODULE_2__impl_scanner_js__","__WEBPACK_IMPORTED_MODULE_3__impl_parser_js__","898","setProperty","formattingOptions","getInsertionIndex","__WEBPACK_IMPORTED_MODULE_1__parser_js__","lastSegment","existing","propertyIndex","removeBegin","removeEnd","previous","next","withFormatting","stringify","newProperty","removalIndex","toRemove","parentEndOffset","applyEdit","begin","__WEBPACK_IMPORTED_MODULE_0__format_js__","edit_1"],"mappings":"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","file":"static/js/2.481f7fdd.chunk.js","sourcesContent":["webpackJsonp([2],{\n\n/***/ 670:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\nObject.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony export (immutable) */ __webpack_exports__[\"setupMode\"] = setupMode;\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__workerManager_js__ = __webpack_require__(893);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__languageFeatures_js__ = __webpack_require__(894);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__tokenization_js__ = __webpack_require__(896);\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n\n\n\nfunction setupMode(defaults) {\n    var disposables = [];\n    var client = new __WEBPACK_IMPORTED_MODULE_0__workerManager_js__[\"a\" /* WorkerManager */](defaults);\n    disposables.push(client);\n    var worker = function () {\n        var uris = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            uris[_i] = arguments[_i];\n        }\n        return client.getLanguageServiceWorker.apply(client, uris);\n    };\n    var languageId = defaults.languageId;\n    disposables.push(monaco.languages.registerCompletionItemProvider(languageId, new __WEBPACK_IMPORTED_MODULE_1__languageFeatures_js__[\"a\" /* CompletionAdapter */](worker)));\n    disposables.push(monaco.languages.registerHoverProvider(languageId, new __WEBPACK_IMPORTED_MODULE_1__languageFeatures_js__[\"f\" /* HoverAdapter */](worker)));\n    disposables.push(monaco.languages.registerDocumentSymbolProvider(languageId, new __WEBPACK_IMPORTED_MODULE_1__languageFeatures_js__[\"e\" /* DocumentSymbolAdapter */](worker)));\n    disposables.push(monaco.languages.registerDocumentFormattingEditProvider(languageId, new __WEBPACK_IMPORTED_MODULE_1__languageFeatures_js__[\"c\" /* DocumentFormattingEditProvider */](worker)));\n    disposables.push(monaco.languages.registerDocumentRangeFormattingEditProvider(languageId, new __WEBPACK_IMPORTED_MODULE_1__languageFeatures_js__[\"d\" /* DocumentRangeFormattingEditProvider */](worker)));\n    disposables.push(new __WEBPACK_IMPORTED_MODULE_1__languageFeatures_js__[\"b\" /* DiagnostcsAdapter */](languageId, worker));\n    disposables.push(monaco.languages.setTokensProvider(languageId, Object(__WEBPACK_IMPORTED_MODULE_2__tokenization_js__[\"a\" /* createTokenizationSupport */])(true)));\n    disposables.push(monaco.languages.setLanguageConfiguration(languageId, richEditConfiguration));\n}\nvar richEditConfiguration = {\n    wordPattern: /(-?\\d*\\.\\d\\w*)|([^\\[\\{\\]\\}\\:\\\"\\,\\s]+)/g,\n    comments: {\n        lineComment: '//',\n        blockComment: ['/*', '*/']\n    },\n    brackets: [\n        ['{', '}'],\n        ['[', ']']\n    ],\n    autoClosingPairs: [\n        { open: '{', close: '}', notIn: ['string'] },\n        { open: '[', close: ']', notIn: ['string'] },\n        { open: '\"', close: '\"', notIn: ['string'] }\n    ]\n};\n\n\n/***/ }),\n\n/***/ 746:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (immutable) */ __webpack_exports__[\"a\"] = createScanner;\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n/**\n * Creates a JSON scanner on the given text.\n * If ignoreTrivia is set, whitespaces or comments are ignored.\n */\nfunction createScanner(text, ignoreTrivia) {\n    if (ignoreTrivia === void 0) { ignoreTrivia = false; }\n    var pos = 0, len = text.length, value = '', tokenOffset = 0, token = 16 /* Unknown */, scanError = 0 /* None */;\n    function scanHexDigits(count, exact) {\n        var digits = 0;\n        var value = 0;\n        while (digits < count || !exact) {\n            var ch = text.charCodeAt(pos);\n            if (ch >= 48 /* _0 */ && ch <= 57 /* _9 */) {\n                value = value * 16 + ch - 48 /* _0 */;\n            }\n            else if (ch >= 65 /* A */ && ch <= 70 /* F */) {\n                value = value * 16 + ch - 65 /* A */ + 10;\n            }\n            else if (ch >= 97 /* a */ && ch <= 102 /* f */) {\n                value = value * 16 + ch - 97 /* a */ + 10;\n            }\n            else {\n                break;\n            }\n            pos++;\n            digits++;\n        }\n        if (digits < count) {\n            value = -1;\n        }\n        return value;\n    }\n    function setPosition(newPosition) {\n        pos = newPosition;\n        value = '';\n        tokenOffset = 0;\n        token = 16 /* Unknown */;\n        scanError = 0 /* None */;\n    }\n    function scanNumber() {\n        var start = pos;\n        if (text.charCodeAt(pos) === 48 /* _0 */) {\n            pos++;\n        }\n        else {\n            pos++;\n            while (pos < text.length && isDigit(text.charCodeAt(pos))) {\n                pos++;\n            }\n        }\n        if (pos < text.length && text.charCodeAt(pos) === 46 /* dot */) {\n            pos++;\n            if (pos < text.length && isDigit(text.charCodeAt(pos))) {\n                pos++;\n                while (pos < text.length && isDigit(text.charCodeAt(pos))) {\n                    pos++;\n                }\n            }\n            else {\n                scanError = 3 /* UnexpectedEndOfNumber */;\n                return text.substring(start, pos);\n            }\n        }\n        var end = pos;\n        if (pos < text.length && (text.charCodeAt(pos) === 69 /* E */ || text.charCodeAt(pos) === 101 /* e */)) {\n            pos++;\n            if (pos < text.length && text.charCodeAt(pos) === 43 /* plus */ || text.charCodeAt(pos) === 45 /* minus */) {\n                pos++;\n            }\n            if (pos < text.length && isDigit(text.charCodeAt(pos))) {\n                pos++;\n                while (pos < text.length && isDigit(text.charCodeAt(pos))) {\n                    pos++;\n                }\n                end = pos;\n            }\n            else {\n                scanError = 3 /* UnexpectedEndOfNumber */;\n            }\n        }\n        return text.substring(start, end);\n    }\n    function scanString() {\n        var result = '', start = pos;\n        while (true) {\n            if (pos >= len) {\n                result += text.substring(start, pos);\n                scanError = 2 /* UnexpectedEndOfString */;\n                break;\n            }\n            var ch = text.charCodeAt(pos);\n            if (ch === 34 /* doubleQuote */) {\n                result += text.substring(start, pos);\n                pos++;\n                break;\n            }\n            if (ch === 92 /* backslash */) {\n                result += text.substring(start, pos);\n                pos++;\n                if (pos >= len) {\n                    scanError = 2 /* UnexpectedEndOfString */;\n                    break;\n                }\n                ch = text.charCodeAt(pos++);\n                switch (ch) {\n                    case 34 /* doubleQuote */:\n                        result += '\\\"';\n                        break;\n                    case 92 /* backslash */:\n                        result += '\\\\';\n                        break;\n                    case 47 /* slash */:\n                        result += '/';\n                        break;\n                    case 98 /* b */:\n                        result += '\\b';\n                        break;\n                    case 102 /* f */:\n                        result += '\\f';\n                        break;\n                    case 110 /* n */:\n                        result += '\\n';\n                        break;\n                    case 114 /* r */:\n                        result += '\\r';\n                        break;\n                    case 116 /* t */:\n                        result += '\\t';\n                        break;\n                    case 117 /* u */:\n                        var ch_1 = scanHexDigits(4, true);\n                        if (ch_1 >= 0) {\n                            result += String.fromCharCode(ch_1);\n                        }\n                        else {\n                            scanError = 4 /* InvalidUnicode */;\n                        }\n                        break;\n                    default:\n                        scanError = 5 /* InvalidEscapeCharacter */;\n                }\n                start = pos;\n                continue;\n            }\n            if (ch >= 0 && ch <= 0x1f) {\n                if (isLineBreak(ch)) {\n                    result += text.substring(start, pos);\n                    scanError = 2 /* UnexpectedEndOfString */;\n                    break;\n                }\n                else {\n                    scanError = 6 /* InvalidCharacter */;\n                    // mark as error but continue with string\n                }\n            }\n            pos++;\n        }\n        return result;\n    }\n    function scanNext() {\n        value = '';\n        scanError = 0 /* None */;\n        tokenOffset = pos;\n        if (pos >= len) {\n            // at the end\n            tokenOffset = len;\n            return token = 17 /* EOF */;\n        }\n        var code = text.charCodeAt(pos);\n        // trivia: whitespace\n        if (isWhiteSpace(code)) {\n            do {\n                pos++;\n                value += String.fromCharCode(code);\n                code = text.charCodeAt(pos);\n            } while (isWhiteSpace(code));\n            return token = 15 /* Trivia */;\n        }\n        // trivia: newlines\n        if (isLineBreak(code)) {\n            pos++;\n            value += String.fromCharCode(code);\n            if (code === 13 /* carriageReturn */ && text.charCodeAt(pos) === 10 /* lineFeed */) {\n                pos++;\n                value += '\\n';\n            }\n            return token = 14 /* LineBreakTrivia */;\n        }\n        switch (code) {\n            // tokens: []{}:,\n            case 123 /* openBrace */:\n                pos++;\n                return token = 1 /* OpenBraceToken */;\n            case 125 /* closeBrace */:\n                pos++;\n                return token = 2 /* CloseBraceToken */;\n            case 91 /* openBracket */:\n                pos++;\n                return token = 3 /* OpenBracketToken */;\n            case 93 /* closeBracket */:\n                pos++;\n                return token = 4 /* CloseBracketToken */;\n            case 58 /* colon */:\n                pos++;\n                return token = 6 /* ColonToken */;\n            case 44 /* comma */:\n                pos++;\n                return token = 5 /* CommaToken */;\n            // strings\n            case 34 /* doubleQuote */:\n                pos++;\n                value = scanString();\n                return token = 10 /* StringLiteral */;\n            // comments\n            case 47 /* slash */:\n                var start = pos - 1;\n                // Single-line comment\n                if (text.charCodeAt(pos + 1) === 47 /* slash */) {\n                    pos += 2;\n                    while (pos < len) {\n                        if (isLineBreak(text.charCodeAt(pos))) {\n                            break;\n                        }\n                        pos++;\n                    }\n                    value = text.substring(start, pos);\n                    return token = 12 /* LineCommentTrivia */;\n                }\n                // Multi-line comment\n                if (text.charCodeAt(pos + 1) === 42 /* asterisk */) {\n                    pos += 2;\n                    var commentClosed = false;\n                    while (pos < len) {\n                        var ch = text.charCodeAt(pos);\n                        if (ch === 42 /* asterisk */ && (pos + 1 < len) && text.charCodeAt(pos + 1) === 47 /* slash */) {\n                            pos += 2;\n                            commentClosed = true;\n                            break;\n                        }\n                        pos++;\n                    }\n                    if (!commentClosed) {\n                        pos++;\n                        scanError = 1 /* UnexpectedEndOfComment */;\n                    }\n                    value = text.substring(start, pos);\n                    return token = 13 /* BlockCommentTrivia */;\n                }\n                // just a single slash\n                value += String.fromCharCode(code);\n                pos++;\n                return token = 16 /* Unknown */;\n            // numbers\n            case 45 /* minus */:\n                value += String.fromCharCode(code);\n                pos++;\n                if (pos === len || !isDigit(text.charCodeAt(pos))) {\n                    return token = 16 /* Unknown */;\n                }\n            // found a minus, followed by a number so\n            // we fall through to proceed with scanning\n            // numbers\n            case 48 /* _0 */:\n            case 49 /* _1 */:\n            case 50 /* _2 */:\n            case 51 /* _3 */:\n            case 52 /* _4 */:\n            case 53 /* _5 */:\n            case 54 /* _6 */:\n            case 55 /* _7 */:\n            case 56 /* _8 */:\n            case 57 /* _9 */:\n                value += scanNumber();\n                return token = 11 /* NumericLiteral */;\n            // literals and unknown symbols\n            default:\n                // is a literal? Read the full word.\n                while (pos < len && isUnknownContentCharacter(code)) {\n                    pos++;\n                    code = text.charCodeAt(pos);\n                }\n                if (tokenOffset !== pos) {\n                    value = text.substring(tokenOffset, pos);\n                    // keywords: true, false, null\n                    switch (value) {\n                        case 'true': return token = 8 /* TrueKeyword */;\n                        case 'false': return token = 9 /* FalseKeyword */;\n                        case 'null': return token = 7 /* NullKeyword */;\n                    }\n                    return token = 16 /* Unknown */;\n                }\n                // some\n                value += String.fromCharCode(code);\n                pos++;\n                return token = 16 /* Unknown */;\n        }\n    }\n    function isUnknownContentCharacter(code) {\n        if (isWhiteSpace(code) || isLineBreak(code)) {\n            return false;\n        }\n        switch (code) {\n            case 125 /* closeBrace */:\n            case 93 /* closeBracket */:\n            case 123 /* openBrace */:\n            case 91 /* openBracket */:\n            case 34 /* doubleQuote */:\n            case 58 /* colon */:\n            case 44 /* comma */:\n                return false;\n        }\n        return true;\n    }\n    function scanNextNonTrivia() {\n        var result;\n        do {\n            result = scanNext();\n        } while (result >= 12 /* LineCommentTrivia */ && result <= 15 /* Trivia */);\n        return result;\n    }\n    return {\n        setPosition: setPosition,\n        getPosition: function () { return pos; },\n        scan: ignoreTrivia ? scanNextNonTrivia : scanNext,\n        getToken: function () { return token; },\n        getTokenValue: function () { return value; },\n        getTokenOffset: function () { return tokenOffset; },\n        getTokenLength: function () { return pos - tokenOffset; },\n        getTokenError: function () { return scanError; }\n    };\n}\nfunction isWhiteSpace(ch) {\n    return ch === 32 /* space */ || ch === 9 /* tab */ || ch === 11 /* verticalTab */ || ch === 12 /* formFeed */ ||\n        ch === 160 /* nonBreakingSpace */ || ch === 5760 /* ogham */ || ch >= 8192 /* enQuad */ && ch <= 8203 /* zeroWidthSpace */ ||\n        ch === 8239 /* narrowNoBreakSpace */ || ch === 8287 /* mathematicalSpace */ || ch === 12288 /* ideographicSpace */ || ch === 65279 /* byteOrderMark */;\n}\nfunction isLineBreak(ch) {\n    return ch === 10 /* lineFeed */ || ch === 13 /* carriageReturn */ || ch === 8232 /* lineSeparator */ || ch === 8233 /* paragraphSeparator */;\n}\nfunction isDigit(ch) {\n    return ch >= 48 /* _0 */ && ch <= 57 /* _9 */;\n}\n//# sourceMappingURL=scanner.js.map\n\n/***/ }),\n\n/***/ 788:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (immutable) */ __webpack_exports__[\"a\"] = format;\n/* harmony export (immutable) */ __webpack_exports__[\"b\"] = isEOL;\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__scanner_js__ = __webpack_require__(746);\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n\nfunction format(documentText, range, options) {\n    var initialIndentLevel;\n    var formatText;\n    var formatTextStart;\n    var rangeStart;\n    var rangeEnd;\n    if (range) {\n        rangeStart = range.offset;\n        rangeEnd = rangeStart + range.length;\n        formatTextStart = rangeStart;\n        while (formatTextStart > 0 && !isEOL(documentText, formatTextStart - 1)) {\n            formatTextStart--;\n        }\n        var endOffset = rangeEnd;\n        while (endOffset < documentText.length && !isEOL(documentText, endOffset)) {\n            endOffset++;\n        }\n        formatText = documentText.substring(formatTextStart, endOffset);\n        initialIndentLevel = computeIndentLevel(formatText, 0, options);\n    }\n    else {\n        formatText = documentText;\n        initialIndentLevel = 0;\n        formatTextStart = 0;\n        rangeStart = 0;\n        rangeEnd = documentText.length;\n    }\n    var eol = getEOL(options, documentText);\n    var lineBreak = false;\n    var indentLevel = 0;\n    var indentValue;\n    if (options.insertSpaces) {\n        indentValue = repeat(' ', options.tabSize || 4);\n    }\n    else {\n        indentValue = '\\t';\n    }\n    var scanner = Object(__WEBPACK_IMPORTED_MODULE_0__scanner_js__[\"a\" /* createScanner */])(formatText, false);\n    var hasError = false;\n    function newLineAndIndent() {\n        return eol + repeat(indentValue, initialIndentLevel + indentLevel);\n    }\n    function scanNext() {\n        var token = scanner.scan();\n        lineBreak = false;\n        while (token === 15 /* Trivia */ || token === 14 /* LineBreakTrivia */) {\n            lineBreak = lineBreak || (token === 14 /* LineBreakTrivia */);\n            token = scanner.scan();\n        }\n        hasError = token === 16 /* Unknown */ || scanner.getTokenError() !== 0 /* None */;\n        return token;\n    }\n    var editOperations = [];\n    function addEdit(text, startOffset, endOffset) {\n        if (!hasError && startOffset < rangeEnd && endOffset > rangeStart && documentText.substring(startOffset, endOffset) !== text) {\n            editOperations.push({ offset: startOffset, length: endOffset - startOffset, content: text });\n        }\n    }\n    var firstToken = scanNext();\n    if (firstToken !== 17 /* EOF */) {\n        var firstTokenStart = scanner.getTokenOffset() + formatTextStart;\n        var initialIndent = repeat(indentValue, initialIndentLevel);\n        addEdit(initialIndent, formatTextStart, firstTokenStart);\n    }\n    while (firstToken !== 17 /* EOF */) {\n        var firstTokenEnd = scanner.getTokenOffset() + scanner.getTokenLength() + formatTextStart;\n        var secondToken = scanNext();\n        var replaceContent = '';\n        while (!lineBreak && (secondToken === 12 /* LineCommentTrivia */ || secondToken === 13 /* BlockCommentTrivia */)) {\n            // comments on the same line: keep them on the same line, but ignore them otherwise\n            var commentTokenStart = scanner.getTokenOffset() + formatTextStart;\n            addEdit(' ', firstTokenEnd, commentTokenStart);\n            firstTokenEnd = scanner.getTokenOffset() + scanner.getTokenLength() + formatTextStart;\n            replaceContent = secondToken === 12 /* LineCommentTrivia */ ? newLineAndIndent() : '';\n            secondToken = scanNext();\n        }\n        if (secondToken === 2 /* CloseBraceToken */) {\n            if (firstToken !== 1 /* OpenBraceToken */) {\n                indentLevel--;\n                replaceContent = newLineAndIndent();\n            }\n        }\n        else if (secondToken === 4 /* CloseBracketToken */) {\n            if (firstToken !== 3 /* OpenBracketToken */) {\n                indentLevel--;\n                replaceContent = newLineAndIndent();\n            }\n        }\n        else {\n            switch (firstToken) {\n                case 3 /* OpenBracketToken */:\n                case 1 /* OpenBraceToken */:\n                    indentLevel++;\n                    replaceContent = newLineAndIndent();\n                    break;\n                case 5 /* CommaToken */:\n                case 12 /* LineCommentTrivia */:\n                    replaceContent = newLineAndIndent();\n                    break;\n                case 13 /* BlockCommentTrivia */:\n                    if (lineBreak) {\n                        replaceContent = newLineAndIndent();\n                    }\n                    else {\n                        // symbol following comment on the same line: keep on same line, separate with ' '\n                        replaceContent = ' ';\n                    }\n                    break;\n                case 6 /* ColonToken */:\n                    replaceContent = ' ';\n                    break;\n                case 10 /* StringLiteral */:\n                    if (secondToken === 6 /* ColonToken */) {\n                        replaceContent = '';\n                        break;\n                    }\n                // fall through\n                case 7 /* NullKeyword */:\n                case 8 /* TrueKeyword */:\n                case 9 /* FalseKeyword */:\n                case 11 /* NumericLiteral */:\n                case 2 /* CloseBraceToken */:\n                case 4 /* CloseBracketToken */:\n                    if (secondToken === 12 /* LineCommentTrivia */ || secondToken === 13 /* BlockCommentTrivia */) {\n                        replaceContent = ' ';\n                    }\n                    else if (secondToken !== 5 /* CommaToken */ && secondToken !== 17 /* EOF */) {\n                        hasError = true;\n                    }\n                    break;\n                case 16 /* Unknown */:\n                    hasError = true;\n                    break;\n            }\n            if (lineBreak && (secondToken === 12 /* LineCommentTrivia */ || secondToken === 13 /* BlockCommentTrivia */)) {\n                replaceContent = newLineAndIndent();\n            }\n        }\n        var secondTokenStart = scanner.getTokenOffset() + formatTextStart;\n        addEdit(replaceContent, firstTokenEnd, secondTokenStart);\n        firstToken = secondToken;\n    }\n    return editOperations;\n}\nfunction repeat(s, count) {\n    var result = '';\n    for (var i = 0; i < count; i++) {\n        result += s;\n    }\n    return result;\n}\nfunction computeIndentLevel(content, offset, options) {\n    var i = 0;\n    var nChars = 0;\n    var tabSize = options.tabSize || 4;\n    while (i < content.length) {\n        var ch = content.charAt(i);\n        if (ch === ' ') {\n            nChars++;\n        }\n        else if (ch === '\\t') {\n            nChars += tabSize;\n        }\n        else {\n            break;\n        }\n        i++;\n    }\n    return Math.floor(nChars / tabSize);\n}\nfunction getEOL(options, text) {\n    for (var i = 0; i < text.length; i++) {\n        var ch = text.charAt(i);\n        if (ch === '\\r') {\n            if (i + 1 < text.length && text.charAt(i + 1) === '\\n') {\n                return '\\r\\n';\n            }\n            return '\\r';\n        }\n        else if (ch === '\\n') {\n            return '\\n';\n        }\n    }\n    return (options && options.eol) || '\\n';\n}\nfunction isEOL(text, offset) {\n    return '\\r\\n'.indexOf(text.charAt(offset)) !== -1;\n}\n//# sourceMappingURL=format.js.map\n\n/***/ }),\n\n/***/ 789:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (immutable) */ __webpack_exports__[\"b\"] = getLocation;\n/* harmony export (immutable) */ __webpack_exports__[\"d\"] = parse;\n/* harmony export (immutable) */ __webpack_exports__[\"e\"] = parseTree;\n/* harmony export (immutable) */ __webpack_exports__[\"a\"] = findNodeAtLocation;\n/* harmony export (immutable) */ __webpack_exports__[\"c\"] = getNodeValue;\n/* harmony export (immutable) */ __webpack_exports__[\"g\"] = visit;\n/* harmony export (immutable) */ __webpack_exports__[\"f\"] = stripComments;\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__scanner_js__ = __webpack_require__(746);\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n\n/**\n * For a given offset, evaluate the location in the JSON document. Each segment in the location path is either a property name or an array index.\n */\nfunction getLocation(text, position) {\n    var segments = []; // strings or numbers\n    var earlyReturnException = new Object();\n    var previousNode = void 0;\n    var previousNodeInst = {\n        value: {},\n        offset: 0,\n        length: 0,\n        type: 'object'\n    };\n    var isAtPropertyKey = false;\n    function setPreviousNode(value, offset, length, type) {\n        previousNodeInst.value = value;\n        previousNodeInst.offset = offset;\n        previousNodeInst.length = length;\n        previousNodeInst.type = type;\n        previousNodeInst.columnOffset = void 0;\n        previousNode = previousNodeInst;\n    }\n    try {\n        visit(text, {\n            onObjectBegin: function (offset, length) {\n                if (position <= offset) {\n                    throw earlyReturnException;\n                }\n                previousNode = void 0;\n                isAtPropertyKey = position > offset;\n                segments.push(''); // push a placeholder (will be replaced)\n            },\n            onObjectProperty: function (name, offset, length) {\n                if (position < offset) {\n                    throw earlyReturnException;\n                }\n                setPreviousNode(name, offset, length, 'property');\n                segments[segments.length - 1] = name;\n                if (position <= offset + length) {\n                    throw earlyReturnException;\n                }\n            },\n            onObjectEnd: function (offset, length) {\n                if (position <= offset) {\n                    throw earlyReturnException;\n                }\n                previousNode = void 0;\n                segments.pop();\n            },\n            onArrayBegin: function (offset, length) {\n                if (position <= offset) {\n                    throw earlyReturnException;\n                }\n                previousNode = void 0;\n                segments.push(0);\n            },\n            onArrayEnd: function (offset, length) {\n                if (position <= offset) {\n                    throw earlyReturnException;\n                }\n                previousNode = void 0;\n                segments.pop();\n            },\n            onLiteralValue: function (value, offset, length) {\n                if (position < offset) {\n                    throw earlyReturnException;\n                }\n                setPreviousNode(value, offset, length, getLiteralNodeType(value));\n                if (position <= offset + length) {\n                    throw earlyReturnException;\n                }\n            },\n            onSeparator: function (sep, offset, length) {\n                if (position <= offset) {\n                    throw earlyReturnException;\n                }\n                if (sep === ':' && previousNode && previousNode.type === 'property') {\n                    previousNode.columnOffset = offset;\n                    isAtPropertyKey = false;\n                    previousNode = void 0;\n                }\n                else if (sep === ',') {\n                    var last = segments[segments.length - 1];\n                    if (typeof last === 'number') {\n                        segments[segments.length - 1] = last + 1;\n                    }\n                    else {\n                        isAtPropertyKey = true;\n                        segments[segments.length - 1] = '';\n                    }\n                    previousNode = void 0;\n                }\n            }\n        });\n    }\n    catch (e) {\n        if (e !== earlyReturnException) {\n            throw e;\n        }\n    }\n    return {\n        path: segments,\n        previousNode: previousNode,\n        isAtPropertyKey: isAtPropertyKey,\n        matches: function (pattern) {\n            var k = 0;\n            for (var i = 0; k < pattern.length && i < segments.length; i++) {\n                if (pattern[k] === segments[i] || pattern[k] === '*') {\n                    k++;\n                }\n                else if (pattern[k] !== '**') {\n                    return false;\n                }\n            }\n            return k === pattern.length;\n        }\n    };\n}\n/**\n * Parses the given text and returns the object the JSON content represents. On invalid input, the parser tries to be as fault tolerant as possible, but still return a result.\n * Therefore always check the errors list to find out if the input was valid.\n */\nfunction parse(text, errors, options) {\n    if (errors === void 0) { errors = []; }\n    var currentProperty = null;\n    var currentParent = [];\n    var previousParents = [];\n    function onValue(value) {\n        if (Array.isArray(currentParent)) {\n            currentParent.push(value);\n        }\n        else if (currentProperty) {\n            currentParent[currentProperty] = value;\n        }\n    }\n    var visitor = {\n        onObjectBegin: function () {\n            var object = {};\n            onValue(object);\n            previousParents.push(currentParent);\n            currentParent = object;\n            currentProperty = null;\n        },\n        onObjectProperty: function (name) {\n            currentProperty = name;\n        },\n        onObjectEnd: function () {\n            currentParent = previousParents.pop();\n        },\n        onArrayBegin: function () {\n            var array = [];\n            onValue(array);\n            previousParents.push(currentParent);\n            currentParent = array;\n            currentProperty = null;\n        },\n        onArrayEnd: function () {\n            currentParent = previousParents.pop();\n        },\n        onLiteralValue: onValue,\n        onError: function (error, offset, length) {\n            errors.push({ error: error, offset: offset, length: length });\n        }\n    };\n    visit(text, visitor, options);\n    return currentParent[0];\n}\n/**\n * Parses the given text and returns a tree representation the JSON content. On invalid input, the parser tries to be as fault tolerant as possible, but still return a result.\n */\nfunction parseTree(text, errors, options) {\n    if (errors === void 0) { errors = []; }\n    var currentParent = { type: 'array', offset: -1, length: -1, children: [] }; // artificial root\n    function ensurePropertyComplete(endOffset) {\n        if (currentParent.type === 'property') {\n            currentParent.length = endOffset - currentParent.offset;\n            currentParent = currentParent.parent;\n        }\n    }\n    function onValue(valueNode) {\n        currentParent.children.push(valueNode);\n        return valueNode;\n    }\n    var visitor = {\n        onObjectBegin: function (offset) {\n            currentParent = onValue({ type: 'object', offset: offset, length: -1, parent: currentParent, children: [] });\n        },\n        onObjectProperty: function (name, offset, length) {\n            currentParent = onValue({ type: 'property', offset: offset, length: -1, parent: currentParent, children: [] });\n            currentParent.children.push({ type: 'string', value: name, offset: offset, length: length, parent: currentParent });\n        },\n        onObjectEnd: function (offset, length) {\n            currentParent.length = offset + length - currentParent.offset;\n            currentParent = currentParent.parent;\n            ensurePropertyComplete(offset + length);\n        },\n        onArrayBegin: function (offset, length) {\n            currentParent = onValue({ type: 'array', offset: offset, length: -1, parent: currentParent, children: [] });\n        },\n        onArrayEnd: function (offset, length) {\n            currentParent.length = offset + length - currentParent.offset;\n            currentParent = currentParent.parent;\n            ensurePropertyComplete(offset + length);\n        },\n        onLiteralValue: function (value, offset, length) {\n            onValue({ type: getLiteralNodeType(value), offset: offset, length: length, parent: currentParent, value: value });\n            ensurePropertyComplete(offset + length);\n        },\n        onSeparator: function (sep, offset, length) {\n            if (currentParent.type === 'property') {\n                if (sep === ':') {\n                    currentParent.columnOffset = offset;\n                }\n                else if (sep === ',') {\n                    ensurePropertyComplete(offset);\n                }\n            }\n        },\n        onError: function (error, offset, length) {\n            errors.push({ error: error, offset: offset, length: length });\n        }\n    };\n    visit(text, visitor, options);\n    var result = currentParent.children[0];\n    if (result) {\n        delete result.parent;\n    }\n    return result;\n}\n/**\n * Finds the node at the given path in a JSON DOM.\n */\nfunction findNodeAtLocation(root, path) {\n    if (!root) {\n        return void 0;\n    }\n    var node = root;\n    for (var _i = 0, path_1 = path; _i < path_1.length; _i++) {\n        var segment = path_1[_i];\n        if (typeof segment === 'string') {\n            if (node.type !== 'object' || !Array.isArray(node.children)) {\n                return void 0;\n            }\n            var found = false;\n            for (var _a = 0, _b = node.children; _a < _b.length; _a++) {\n                var propertyNode = _b[_a];\n                if (Array.isArray(propertyNode.children) && propertyNode.children[0].value === segment) {\n                    node = propertyNode.children[1];\n                    found = true;\n                    break;\n                }\n            }\n            if (!found) {\n                return void 0;\n            }\n        }\n        else {\n            var index = segment;\n            if (node.type !== 'array' || index < 0 || !Array.isArray(node.children) || index >= node.children.length) {\n                return void 0;\n            }\n            node = node.children[index];\n        }\n    }\n    return node;\n}\n/**\n * Evaluates the JavaScript object of the given JSON DOM node\n */\nfunction getNodeValue(node) {\n    if (node.type === 'array') {\n        return node.children.map(getNodeValue);\n    }\n    else if (node.type === 'object') {\n        var obj = Object.create(null);\n        for (var _i = 0, _a = node.children; _i < _a.length; _i++) {\n            var prop = _a[_i];\n            obj[prop.children[0].value] = getNodeValue(prop.children[1]);\n        }\n        return obj;\n    }\n    return node.value;\n}\n/**\n * Parses the given text and invokes the visitor functions for each object, array and literal reached.\n */\nfunction visit(text, visitor, options) {\n    var _scanner = Object(__WEBPACK_IMPORTED_MODULE_0__scanner_js__[\"a\" /* createScanner */])(text, false);\n    function toNoArgVisit(visitFunction) {\n        return visitFunction ? function () { return visitFunction(_scanner.getTokenOffset(), _scanner.getTokenLength()); } : function () { return true; };\n    }\n    function toOneArgVisit(visitFunction) {\n        return visitFunction ? function (arg) { return visitFunction(arg, _scanner.getTokenOffset(), _scanner.getTokenLength()); } : function () { return true; };\n    }\n    var onObjectBegin = toNoArgVisit(visitor.onObjectBegin), onObjectProperty = toOneArgVisit(visitor.onObjectProperty), onObjectEnd = toNoArgVisit(visitor.onObjectEnd), onArrayBegin = toNoArgVisit(visitor.onArrayBegin), onArrayEnd = toNoArgVisit(visitor.onArrayEnd), onLiteralValue = toOneArgVisit(visitor.onLiteralValue), onSeparator = toOneArgVisit(visitor.onSeparator), onComment = toNoArgVisit(visitor.onComment), onError = toOneArgVisit(visitor.onError);\n    var disallowComments = options && options.disallowComments;\n    var allowTrailingComma = options && options.allowTrailingComma;\n    function scanNext() {\n        while (true) {\n            var token = _scanner.scan();\n            switch (_scanner.getTokenError()) {\n                case 4 /* InvalidUnicode */:\n                    handleError(14 /* InvalidUnicode */);\n                    break;\n                case 5 /* InvalidEscapeCharacter */:\n                    handleError(15 /* InvalidEscapeCharacter */);\n                    break;\n                case 3 /* UnexpectedEndOfNumber */:\n                    handleError(13 /* UnexpectedEndOfNumber */);\n                    break;\n                case 1 /* UnexpectedEndOfComment */:\n                    if (!disallowComments) {\n                        handleError(11 /* UnexpectedEndOfComment */);\n                    }\n                    break;\n                case 2 /* UnexpectedEndOfString */:\n                    handleError(12 /* UnexpectedEndOfString */);\n                    break;\n                case 6 /* InvalidCharacter */:\n                    handleError(16 /* InvalidCharacter */);\n                    break;\n            }\n            switch (token) {\n                case 12 /* LineCommentTrivia */:\n                case 13 /* BlockCommentTrivia */:\n                    if (disallowComments) {\n                        handleError(10 /* InvalidCommentToken */);\n                    }\n                    else {\n                        onComment();\n                    }\n                    break;\n                case 16 /* Unknown */:\n                    handleError(1 /* InvalidSymbol */);\n                    break;\n                case 15 /* Trivia */:\n                case 14 /* LineBreakTrivia */:\n                    break;\n                default:\n                    return token;\n            }\n        }\n    }\n    function handleError(error, skipUntilAfter, skipUntil) {\n        if (skipUntilAfter === void 0) { skipUntilAfter = []; }\n        if (skipUntil === void 0) { skipUntil = []; }\n        onError(error);\n        if (skipUntilAfter.length + skipUntil.length > 0) {\n            var token = _scanner.getToken();\n            while (token !== 17 /* EOF */) {\n                if (skipUntilAfter.indexOf(token) !== -1) {\n                    scanNext();\n                    break;\n                }\n                else if (skipUntil.indexOf(token) !== -1) {\n                    break;\n                }\n                token = scanNext();\n            }\n        }\n    }\n    function parseString(isValue) {\n        var value = _scanner.getTokenValue();\n        if (isValue) {\n            onLiteralValue(value);\n        }\n        else {\n            onObjectProperty(value);\n        }\n        scanNext();\n        return true;\n    }\n    function parseLiteral() {\n        switch (_scanner.getToken()) {\n            case 11 /* NumericLiteral */:\n                var value = 0;\n                try {\n                    value = JSON.parse(_scanner.getTokenValue());\n                    if (typeof value !== 'number') {\n                        handleError(2 /* InvalidNumberFormat */);\n                        value = 0;\n                    }\n                }\n                catch (e) {\n                    handleError(2 /* InvalidNumberFormat */);\n                }\n                onLiteralValue(value);\n                break;\n            case 7 /* NullKeyword */:\n                onLiteralValue(null);\n                break;\n            case 8 /* TrueKeyword */:\n                onLiteralValue(true);\n                break;\n            case 9 /* FalseKeyword */:\n                onLiteralValue(false);\n                break;\n            default:\n                return false;\n        }\n        scanNext();\n        return true;\n    }\n    function parseProperty() {\n        if (_scanner.getToken() !== 10 /* StringLiteral */) {\n            handleError(3 /* PropertyNameExpected */, [], [2 /* CloseBraceToken */, 5 /* CommaToken */]);\n            return false;\n        }\n        parseString(false);\n        if (_scanner.getToken() === 6 /* ColonToken */) {\n            onSeparator(':');\n            scanNext(); // consume colon\n            if (!parseValue()) {\n                handleError(4 /* ValueExpected */, [], [2 /* CloseBraceToken */, 5 /* CommaToken */]);\n            }\n        }\n        else {\n            handleError(5 /* ColonExpected */, [], [2 /* CloseBraceToken */, 5 /* CommaToken */]);\n        }\n        return true;\n    }\n    function parseObject() {\n        onObjectBegin();\n        scanNext(); // consume open brace\n        var needsComma = false;\n        while (_scanner.getToken() !== 2 /* CloseBraceToken */ && _scanner.getToken() !== 17 /* EOF */) {\n            if (_scanner.getToken() === 5 /* CommaToken */) {\n                if (!needsComma) {\n                    handleError(4 /* ValueExpected */, [], []);\n                }\n                onSeparator(',');\n                scanNext(); // consume comma\n                if (_scanner.getToken() === 2 /* CloseBraceToken */ && allowTrailingComma) {\n                    break;\n                }\n            }\n            else if (needsComma) {\n                handleError(6 /* CommaExpected */, [], []);\n            }\n            if (!parseProperty()) {\n                handleError(4 /* ValueExpected */, [], [2 /* CloseBraceToken */, 5 /* CommaToken */]);\n            }\n            needsComma = true;\n        }\n        onObjectEnd();\n        if (_scanner.getToken() !== 2 /* CloseBraceToken */) {\n            handleError(7 /* CloseBraceExpected */, [2 /* CloseBraceToken */], []);\n        }\n        else {\n            scanNext(); // consume close brace\n        }\n        return true;\n    }\n    function parseArray() {\n        onArrayBegin();\n        scanNext(); // consume open bracket\n        var needsComma = false;\n        while (_scanner.getToken() !== 4 /* CloseBracketToken */ && _scanner.getToken() !== 17 /* EOF */) {\n            if (_scanner.getToken() === 5 /* CommaToken */) {\n                if (!needsComma) {\n                    handleError(4 /* ValueExpected */, [], []);\n                }\n                onSeparator(',');\n                scanNext(); // consume comma\n                if (_scanner.getToken() === 4 /* CloseBracketToken */ && allowTrailingComma) {\n                    break;\n                }\n            }\n            else if (needsComma) {\n                handleError(6 /* CommaExpected */, [], []);\n            }\n            if (!parseValue()) {\n                handleError(4 /* ValueExpected */, [], [4 /* CloseBracketToken */, 5 /* CommaToken */]);\n            }\n            needsComma = true;\n        }\n        onArrayEnd();\n        if (_scanner.getToken() !== 4 /* CloseBracketToken */) {\n            handleError(8 /* CloseBracketExpected */, [4 /* CloseBracketToken */], []);\n        }\n        else {\n            scanNext(); // consume close bracket\n        }\n        return true;\n    }\n    function parseValue() {\n        switch (_scanner.getToken()) {\n            case 3 /* OpenBracketToken */:\n                return parseArray();\n            case 1 /* OpenBraceToken */:\n                return parseObject();\n            case 10 /* StringLiteral */:\n                return parseString(true);\n            default:\n                return parseLiteral();\n        }\n    }\n    scanNext();\n    if (_scanner.getToken() === 17 /* EOF */) {\n        return true;\n    }\n    if (!parseValue()) {\n        handleError(4 /* ValueExpected */, [], []);\n        return false;\n    }\n    if (_scanner.getToken() !== 17 /* EOF */) {\n        handleError(9 /* EndOfFileExpected */, [], []);\n    }\n    return true;\n}\n/**\n * Takes JSON with JavaScript-style comments and remove\n * them. Optionally replaces every none-newline character\n * of comments with a replaceCharacter\n */\nfunction stripComments(text, replaceCh) {\n    var _scanner = Object(__WEBPACK_IMPORTED_MODULE_0__scanner_js__[\"a\" /* createScanner */])(text), parts = [], kind, offset = 0, pos;\n    do {\n        pos = _scanner.getPosition();\n        kind = _scanner.scan();\n        switch (kind) {\n            case 12 /* LineCommentTrivia */:\n            case 13 /* BlockCommentTrivia */:\n            case 17 /* EOF */:\n                if (offset !== pos) {\n                    parts.push(text.substring(offset, pos));\n                }\n                if (replaceCh !== void 0) {\n                    parts.push(_scanner.getTokenValue().replace(/[^\\r\\n]/g, replaceCh));\n                }\n                offset = _scanner.getPosition();\n                break;\n        }\n    } while (kind !== 17 /* EOF */);\n    return parts.join('');\n}\nfunction getLiteralNodeType(value) {\n    switch (typeof value) {\n        case 'boolean': return 'boolean';\n        case 'number': return 'number';\n        case 'string': return 'string';\n        default: return 'null';\n    }\n}\n//# sourceMappingURL=parser.js.map\n\n/***/ }),\n\n/***/ 893:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return WorkerManager; });\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nvar Promise = monaco.Promise;\nvar STOP_WHEN_IDLE_FOR = 2 * 60 * 1000; // 2min\nvar WorkerManager = /** @class */ (function () {\n    function WorkerManager(defaults) {\n        var _this = this;\n        this._defaults = defaults;\n        this._worker = null;\n        this._idleCheckInterval = setInterval(function () { return _this._checkIfIdle(); }, 30 * 1000);\n        this._lastUsedTime = 0;\n        this._configChangeListener = this._defaults.onDidChange(function () { return _this._stopWorker(); });\n    }\n    WorkerManager.prototype._stopWorker = function () {\n        if (this._worker) {\n            this._worker.dispose();\n            this._worker = null;\n        }\n        this._client = null;\n    };\n    WorkerManager.prototype.dispose = function () {\n        clearInterval(this._idleCheckInterval);\n        this._configChangeListener.dispose();\n        this._stopWorker();\n    };\n    WorkerManager.prototype._checkIfIdle = function () {\n        if (!this._worker) {\n            return;\n        }\n        var timePassedSinceLastUsed = Date.now() - this._lastUsedTime;\n        if (timePassedSinceLastUsed > STOP_WHEN_IDLE_FOR) {\n            this._stopWorker();\n        }\n    };\n    WorkerManager.prototype._getClient = function () {\n        this._lastUsedTime = Date.now();\n        if (!this._client) {\n            this._worker = monaco.editor.createWebWorker({\n                // module that exports the create() method and returns a `JSONWorker` instance\n                moduleId: 'vs/language/json/jsonWorker',\n                label: this._defaults.languageId,\n                // passed in to the create() method\n                createData: {\n                    languageSettings: this._defaults.diagnosticsOptions,\n                    languageId: this._defaults.languageId\n                }\n            });\n            this._client = this._worker.getProxy();\n        }\n        return this._client;\n    };\n    WorkerManager.prototype.getLanguageServiceWorker = function () {\n        var _this = this;\n        var resources = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            resources[_i] = arguments[_i];\n        }\n        var _client;\n        return toShallowCancelPromise(this._getClient().then(function (client) {\n            _client = client;\n        }).then(function (_) {\n            return _this._worker.withSyncedResources(resources);\n        }).then(function (_) { return _client; }));\n    };\n    return WorkerManager;\n}());\n\nfunction toShallowCancelPromise(p) {\n    var completeCallback;\n    var errorCallback;\n    var r = new Promise(function (c, e) {\n        completeCallback = c;\n        errorCallback = e;\n    }, function () { });\n    p.then(completeCallback, errorCallback);\n    return r;\n}\n\n\n/***/ }),\n\n/***/ 894:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"b\", function() { return DiagnostcsAdapter; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return CompletionAdapter; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"f\", function() { return HoverAdapter; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"e\", function() { return DocumentSymbolAdapter; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"c\", function() { return DocumentFormattingEditProvider; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"d\", function() { return DocumentRangeFormattingEditProvider; });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__deps_vscode_languageserver_types_main_js__ = __webpack_require__(895);\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n\nvar Uri = monaco.Uri;\nvar Range = monaco.Range;\n// --- diagnostics --- ---\nvar DiagnostcsAdapter = /** @class */ (function () {\n    function DiagnostcsAdapter(_languageId, _worker) {\n        var _this = this;\n        this._languageId = _languageId;\n        this._worker = _worker;\n        this._disposables = [];\n        this._listener = Object.create(null);\n        var onModelAdd = function (model) {\n            var modeId = model.getModeId();\n            if (modeId !== _this._languageId) {\n                return;\n            }\n            var handle;\n            _this._listener[model.uri.toString()] = model.onDidChangeContent(function () {\n                clearTimeout(handle);\n                handle = setTimeout(function () { return _this._doValidate(model.uri, modeId); }, 500);\n            });\n            _this._doValidate(model.uri, modeId);\n        };\n        var onModelRemoved = function (model) {\n            monaco.editor.setModelMarkers(model, _this._languageId, []);\n            var uriStr = model.uri.toString();\n            var listener = _this._listener[uriStr];\n            if (listener) {\n                listener.dispose();\n                delete _this._listener[uriStr];\n            }\n        };\n        this._disposables.push(monaco.editor.onDidCreateModel(onModelAdd));\n        this._disposables.push(monaco.editor.onWillDisposeModel(function (model) {\n            onModelRemoved(model);\n            _this._resetSchema(model.uri);\n        }));\n        this._disposables.push(monaco.editor.onDidChangeModelLanguage(function (event) {\n            onModelRemoved(event.model);\n            onModelAdd(event.model);\n            _this._resetSchema(event.model.uri);\n        }));\n        this._disposables.push({\n            dispose: function () {\n                for (var key in _this._listener) {\n                    _this._listener[key].dispose();\n                }\n            }\n        });\n        monaco.editor.getModels().forEach(onModelAdd);\n    }\n    DiagnostcsAdapter.prototype.dispose = function () {\n        this._disposables.forEach(function (d) { return d && d.dispose(); });\n        this._disposables = [];\n    };\n    DiagnostcsAdapter.prototype._resetSchema = function (resource) {\n        this._worker().then(function (worker) {\n            worker.resetSchema(resource.toString());\n        });\n    };\n    DiagnostcsAdapter.prototype._doValidate = function (resource, languageId) {\n        this._worker(resource).then(function (worker) {\n            return worker.doValidation(resource.toString()).then(function (diagnostics) {\n                var markers = diagnostics.map(function (d) { return toDiagnostics(resource, d); });\n                var model = monaco.editor.getModel(resource);\n                if (model.getModeId() === languageId) {\n                    monaco.editor.setModelMarkers(model, languageId, markers);\n                }\n            });\n        }).then(undefined, function (err) {\n            console.error(err);\n        });\n    };\n    return DiagnostcsAdapter;\n}());\n\nfunction toSeverity(lsSeverity) {\n    switch (lsSeverity) {\n        case __WEBPACK_IMPORTED_MODULE_0__deps_vscode_languageserver_types_main_js__[\"b\" /* DiagnosticSeverity */].Error: return monaco.MarkerSeverity.Error;\n        case __WEBPACK_IMPORTED_MODULE_0__deps_vscode_languageserver_types_main_js__[\"b\" /* DiagnosticSeverity */].Warning: return monaco.MarkerSeverity.Warning;\n        case __WEBPACK_IMPORTED_MODULE_0__deps_vscode_languageserver_types_main_js__[\"b\" /* DiagnosticSeverity */].Information: return monaco.MarkerSeverity.Info;\n        case __WEBPACK_IMPORTED_MODULE_0__deps_vscode_languageserver_types_main_js__[\"b\" /* DiagnosticSeverity */].Hint: return monaco.MarkerSeverity.Hint;\n        default:\n            return monaco.MarkerSeverity.Info;\n    }\n}\nfunction toDiagnostics(resource, diag) {\n    var code = typeof diag.code === 'number' ? String(diag.code) : diag.code;\n    return {\n        severity: toSeverity(diag.severity),\n        startLineNumber: diag.range.start.line + 1,\n        startColumn: diag.range.start.character + 1,\n        endLineNumber: diag.range.end.line + 1,\n        endColumn: diag.range.end.character + 1,\n        message: diag.message,\n        code: code,\n        source: diag.source\n    };\n}\n// --- completion ------\nfunction fromPosition(position) {\n    if (!position) {\n        return void 0;\n    }\n    return { character: position.column - 1, line: position.lineNumber - 1 };\n}\nfunction fromRange(range) {\n    if (!range) {\n        return void 0;\n    }\n    return { start: fromPosition(range.getStartPosition()), end: fromPosition(range.getEndPosition()) };\n}\nfunction toRange(range) {\n    if (!range) {\n        return void 0;\n    }\n    return new Range(range.start.line + 1, range.start.character + 1, range.end.line + 1, range.end.character + 1);\n}\nfunction toCompletionItemKind(kind) {\n    var mItemKind = monaco.languages.CompletionItemKind;\n    switch (kind) {\n        case __WEBPACK_IMPORTED_MODULE_0__deps_vscode_languageserver_types_main_js__[\"a\" /* CompletionItemKind */].Text: return mItemKind.Text;\n        case __WEBPACK_IMPORTED_MODULE_0__deps_vscode_languageserver_types_main_js__[\"a\" /* CompletionItemKind */].Method: return mItemKind.Method;\n        case __WEBPACK_IMPORTED_MODULE_0__deps_vscode_languageserver_types_main_js__[\"a\" /* CompletionItemKind */].Function: return mItemKind.Function;\n        case __WEBPACK_IMPORTED_MODULE_0__deps_vscode_languageserver_types_main_js__[\"a\" /* CompletionItemKind */].Constructor: return mItemKind.Constructor;\n        case __WEBPACK_IMPORTED_MODULE_0__deps_vscode_languageserver_types_main_js__[\"a\" /* CompletionItemKind */].Field: return mItemKind.Field;\n        case __WEBPACK_IMPORTED_MODULE_0__deps_vscode_languageserver_types_main_js__[\"a\" /* CompletionItemKind */].Variable: return mItemKind.Variable;\n        case __WEBPACK_IMPORTED_MODULE_0__deps_vscode_languageserver_types_main_js__[\"a\" /* CompletionItemKind */].Class: return mItemKind.Class;\n        case __WEBPACK_IMPORTED_MODULE_0__deps_vscode_languageserver_types_main_js__[\"a\" /* CompletionItemKind */].Interface: return mItemKind.Interface;\n        case __WEBPACK_IMPORTED_MODULE_0__deps_vscode_languageserver_types_main_js__[\"a\" /* CompletionItemKind */].Module: return mItemKind.Module;\n        case __WEBPACK_IMPORTED_MODULE_0__deps_vscode_languageserver_types_main_js__[\"a\" /* CompletionItemKind */].Property: return mItemKind.Property;\n        case __WEBPACK_IMPORTED_MODULE_0__deps_vscode_languageserver_types_main_js__[\"a\" /* CompletionItemKind */].Unit: return mItemKind.Unit;\n        case __WEBPACK_IMPORTED_MODULE_0__deps_vscode_languageserver_types_main_js__[\"a\" /* CompletionItemKind */].Value: return mItemKind.Value;\n        case __WEBPACK_IMPORTED_MODULE_0__deps_vscode_languageserver_types_main_js__[\"a\" /* CompletionItemKind */].Enum: return mItemKind.Enum;\n        case __WEBPACK_IMPORTED_MODULE_0__deps_vscode_languageserver_types_main_js__[\"a\" /* CompletionItemKind */].Keyword: return mItemKind.Keyword;\n        case __WEBPACK_IMPORTED_MODULE_0__deps_vscode_languageserver_types_main_js__[\"a\" /* CompletionItemKind */].Snippet: return mItemKind.Snippet;\n        case __WEBPACK_IMPORTED_MODULE_0__deps_vscode_languageserver_types_main_js__[\"a\" /* CompletionItemKind */].Color: return mItemKind.Color;\n        case __WEBPACK_IMPORTED_MODULE_0__deps_vscode_languageserver_types_main_js__[\"a\" /* CompletionItemKind */].File: return mItemKind.File;\n        case __WEBPACK_IMPORTED_MODULE_0__deps_vscode_languageserver_types_main_js__[\"a\" /* CompletionItemKind */].Reference: return mItemKind.Reference;\n    }\n    return mItemKind.Property;\n}\nfunction fromCompletionItemKind(kind) {\n    var mItemKind = monaco.languages.CompletionItemKind;\n    switch (kind) {\n        case mItemKind.Text: return __WEBPACK_IMPORTED_MODULE_0__deps_vscode_languageserver_types_main_js__[\"a\" /* CompletionItemKind */].Text;\n        case mItemKind.Method: return __WEBPACK_IMPORTED_MODULE_0__deps_vscode_languageserver_types_main_js__[\"a\" /* CompletionItemKind */].Method;\n        case mItemKind.Function: return __WEBPACK_IMPORTED_MODULE_0__deps_vscode_languageserver_types_main_js__[\"a\" /* CompletionItemKind */].Function;\n        case mItemKind.Constructor: return __WEBPACK_IMPORTED_MODULE_0__deps_vscode_languageserver_types_main_js__[\"a\" /* CompletionItemKind */].Constructor;\n        case mItemKind.Field: return __WEBPACK_IMPORTED_MODULE_0__deps_vscode_languageserver_types_main_js__[\"a\" /* CompletionItemKind */].Field;\n        case mItemKind.Variable: return __WEBPACK_IMPORTED_MODULE_0__deps_vscode_languageserver_types_main_js__[\"a\" /* CompletionItemKind */].Variable;\n        case mItemKind.Class: return __WEBPACK_IMPORTED_MODULE_0__deps_vscode_languageserver_types_main_js__[\"a\" /* CompletionItemKind */].Class;\n        case mItemKind.Interface: return __WEBPACK_IMPORTED_MODULE_0__deps_vscode_languageserver_types_main_js__[\"a\" /* CompletionItemKind */].Interface;\n        case mItemKind.Module: return __WEBPACK_IMPORTED_MODULE_0__deps_vscode_languageserver_types_main_js__[\"a\" /* CompletionItemKind */].Module;\n        case mItemKind.Property: return __WEBPACK_IMPORTED_MODULE_0__deps_vscode_languageserver_types_main_js__[\"a\" /* CompletionItemKind */].Property;\n        case mItemKind.Unit: return __WEBPACK_IMPORTED_MODULE_0__deps_vscode_languageserver_types_main_js__[\"a\" /* CompletionItemKind */].Unit;\n        case mItemKind.Value: return __WEBPACK_IMPORTED_MODULE_0__deps_vscode_languageserver_types_main_js__[\"a\" /* CompletionItemKind */].Value;\n        case mItemKind.Enum: return __WEBPACK_IMPORTED_MODULE_0__deps_vscode_languageserver_types_main_js__[\"a\" /* CompletionItemKind */].Enum;\n        case mItemKind.Keyword: return __WEBPACK_IMPORTED_MODULE_0__deps_vscode_languageserver_types_main_js__[\"a\" /* CompletionItemKind */].Keyword;\n        case mItemKind.Snippet: return __WEBPACK_IMPORTED_MODULE_0__deps_vscode_languageserver_types_main_js__[\"a\" /* CompletionItemKind */].Snippet;\n        case mItemKind.Color: return __WEBPACK_IMPORTED_MODULE_0__deps_vscode_languageserver_types_main_js__[\"a\" /* CompletionItemKind */].Color;\n        case mItemKind.File: return __WEBPACK_IMPORTED_MODULE_0__deps_vscode_languageserver_types_main_js__[\"a\" /* CompletionItemKind */].File;\n        case mItemKind.Reference: return __WEBPACK_IMPORTED_MODULE_0__deps_vscode_languageserver_types_main_js__[\"a\" /* CompletionItemKind */].Reference;\n    }\n    return __WEBPACK_IMPORTED_MODULE_0__deps_vscode_languageserver_types_main_js__[\"a\" /* CompletionItemKind */].Property;\n}\nfunction toTextEdit(textEdit) {\n    if (!textEdit) {\n        return void 0;\n    }\n    return {\n        range: toRange(textEdit.range),\n        text: textEdit.newText\n    };\n}\nfunction toCompletionItem(entry) {\n    return {\n        label: entry.label,\n        insertText: entry.insertText,\n        sortText: entry.sortText,\n        filterText: entry.filterText,\n        documentation: entry.documentation,\n        detail: entry.detail,\n        kind: toCompletionItemKind(entry.kind),\n        textEdit: toTextEdit(entry.textEdit),\n        data: entry.data\n    };\n}\nfunction fromMarkdownString(entry) {\n    return {\n        kind: (typeof entry === 'string' ? __WEBPACK_IMPORTED_MODULE_0__deps_vscode_languageserver_types_main_js__[\"d\" /* MarkupKind */].PlainText : __WEBPACK_IMPORTED_MODULE_0__deps_vscode_languageserver_types_main_js__[\"d\" /* MarkupKind */].Markdown),\n        value: (typeof entry === 'string' ? entry : entry.value)\n    };\n}\nfunction fromCompletionItem(entry) {\n    var item = {\n        label: entry.label,\n        sortText: entry.sortText,\n        filterText: entry.filterText,\n        documentation: fromMarkdownString(entry.documentation),\n        detail: entry.detail,\n        kind: fromCompletionItemKind(entry.kind),\n        data: entry.data\n    };\n    if (typeof entry.insertText === 'object' && typeof entry.insertText.value === 'string') {\n        item.insertText = entry.insertText.value;\n        item.insertTextFormat = __WEBPACK_IMPORTED_MODULE_0__deps_vscode_languageserver_types_main_js__[\"c\" /* InsertTextFormat */].Snippet;\n    }\n    else {\n        item.insertText = entry.insertText;\n    }\n    if (entry.range) {\n        item.textEdit = __WEBPACK_IMPORTED_MODULE_0__deps_vscode_languageserver_types_main_js__[\"f\" /* TextEdit */].replace(fromRange(entry.range), item.insertText);\n    }\n    return item;\n}\nvar CompletionAdapter = /** @class */ (function () {\n    function CompletionAdapter(_worker) {\n        this._worker = _worker;\n    }\n    Object.defineProperty(CompletionAdapter.prototype, \"triggerCharacters\", {\n        get: function () {\n            return [' ', ':'];\n        },\n        enumerable: true,\n        configurable: true\n    });\n    CompletionAdapter.prototype.provideCompletionItems = function (model, position, token) {\n        var wordInfo = model.getWordUntilPosition(position);\n        var resource = model.uri;\n        return wireCancellationToken(token, this._worker(resource).then(function (worker) {\n            return worker.doComplete(resource.toString(), fromPosition(position));\n        }).then(function (info) {\n            if (!info) {\n                return;\n            }\n            var items = info.items.map(function (entry) {\n                var item = {\n                    label: entry.label,\n                    insertText: entry.insertText,\n                    sortText: entry.sortText,\n                    filterText: entry.filterText,\n                    documentation: entry.documentation,\n                    detail: entry.detail,\n                    kind: toCompletionItemKind(entry.kind),\n                };\n                if (entry.textEdit) {\n                    item.range = toRange(entry.textEdit.range);\n                    item.insertText = entry.textEdit.newText;\n                }\n                if (entry.insertTextFormat === __WEBPACK_IMPORTED_MODULE_0__deps_vscode_languageserver_types_main_js__[\"c\" /* InsertTextFormat */].Snippet) {\n                    item.insertText = { value: item.insertText };\n                }\n                return item;\n            });\n            return {\n                isIncomplete: info.isIncomplete,\n                items: items\n            };\n        }));\n    };\n    return CompletionAdapter;\n}());\n\nfunction isMarkupContent(thing) {\n    return thing && typeof thing === 'object' && typeof thing.kind === 'string';\n}\nfunction toMarkdownString(entry) {\n    if (typeof entry === 'string') {\n        return {\n            value: entry\n        };\n    }\n    if (isMarkupContent(entry)) {\n        if (entry.kind === 'plaintext') {\n            return {\n                value: entry.value.replace(/[\\\\`*_{}[\\]()#+\\-.!]/g, '\\\\$&')\n            };\n        }\n        return {\n            value: entry.value\n        };\n    }\n    return { value: '```' + entry.language + '\\n' + entry.value + '\\n```\\n' };\n}\nfunction toMarkedStringArray(contents) {\n    if (!contents) {\n        return void 0;\n    }\n    if (Array.isArray(contents)) {\n        return contents.map(toMarkdownString);\n    }\n    return [toMarkdownString(contents)];\n}\n// --- hover ------\nvar HoverAdapter = /** @class */ (function () {\n    function HoverAdapter(_worker) {\n        this._worker = _worker;\n    }\n    HoverAdapter.prototype.provideHover = function (model, position, token) {\n        var resource = model.uri;\n        return wireCancellationToken(token, this._worker(resource).then(function (worker) {\n            return worker.doHover(resource.toString(), fromPosition(position));\n        }).then(function (info) {\n            if (!info) {\n                return;\n            }\n            return {\n                range: toRange(info.range),\n                contents: toMarkedStringArray(info.contents)\n            };\n        }));\n    };\n    return HoverAdapter;\n}());\n\n// --- definition ------\nfunction toLocation(location) {\n    return {\n        uri: Uri.parse(location.uri),\n        range: toRange(location.range)\n    };\n}\n// --- document symbols ------\nfunction toSymbolKind(kind) {\n    var mKind = monaco.languages.SymbolKind;\n    switch (kind) {\n        case __WEBPACK_IMPORTED_MODULE_0__deps_vscode_languageserver_types_main_js__[\"e\" /* SymbolKind */].File: return mKind.Array;\n        case __WEBPACK_IMPORTED_MODULE_0__deps_vscode_languageserver_types_main_js__[\"e\" /* SymbolKind */].Module: return mKind.Module;\n        case __WEBPACK_IMPORTED_MODULE_0__deps_vscode_languageserver_types_main_js__[\"e\" /* SymbolKind */].Namespace: return mKind.Namespace;\n        case __WEBPACK_IMPORTED_MODULE_0__deps_vscode_languageserver_types_main_js__[\"e\" /* SymbolKind */].Package: return mKind.Package;\n        case __WEBPACK_IMPORTED_MODULE_0__deps_vscode_languageserver_types_main_js__[\"e\" /* SymbolKind */].Class: return mKind.Class;\n        case __WEBPACK_IMPORTED_MODULE_0__deps_vscode_languageserver_types_main_js__[\"e\" /* SymbolKind */].Method: return mKind.Method;\n        case __WEBPACK_IMPORTED_MODULE_0__deps_vscode_languageserver_types_main_js__[\"e\" /* SymbolKind */].Property: return mKind.Property;\n        case __WEBPACK_IMPORTED_MODULE_0__deps_vscode_languageserver_types_main_js__[\"e\" /* SymbolKind */].Field: return mKind.Field;\n        case __WEBPACK_IMPORTED_MODULE_0__deps_vscode_languageserver_types_main_js__[\"e\" /* SymbolKind */].Constructor: return mKind.Constructor;\n        case __WEBPACK_IMPORTED_MODULE_0__deps_vscode_languageserver_types_main_js__[\"e\" /* SymbolKind */].Enum: return mKind.Enum;\n        case __WEBPACK_IMPORTED_MODULE_0__deps_vscode_languageserver_types_main_js__[\"e\" /* SymbolKind */].Interface: return mKind.Interface;\n        case __WEBPACK_IMPORTED_MODULE_0__deps_vscode_languageserver_types_main_js__[\"e\" /* SymbolKind */].Function: return mKind.Function;\n        case __WEBPACK_IMPORTED_MODULE_0__deps_vscode_languageserver_types_main_js__[\"e\" /* SymbolKind */].Variable: return mKind.Variable;\n        case __WEBPACK_IMPORTED_MODULE_0__deps_vscode_languageserver_types_main_js__[\"e\" /* SymbolKind */].Constant: return mKind.Constant;\n        case __WEBPACK_IMPORTED_MODULE_0__deps_vscode_languageserver_types_main_js__[\"e\" /* SymbolKind */].String: return mKind.String;\n        case __WEBPACK_IMPORTED_MODULE_0__deps_vscode_languageserver_types_main_js__[\"e\" /* SymbolKind */].Number: return mKind.Number;\n        case __WEBPACK_IMPORTED_MODULE_0__deps_vscode_languageserver_types_main_js__[\"e\" /* SymbolKind */].Boolean: return mKind.Boolean;\n        case __WEBPACK_IMPORTED_MODULE_0__deps_vscode_languageserver_types_main_js__[\"e\" /* SymbolKind */].Array: return mKind.Array;\n    }\n    return mKind.Function;\n}\nvar DocumentSymbolAdapter = /** @class */ (function () {\n    function DocumentSymbolAdapter(_worker) {\n        this._worker = _worker;\n    }\n    DocumentSymbolAdapter.prototype.provideDocumentSymbols = function (model, token) {\n        var resource = model.uri;\n        return wireCancellationToken(token, this._worker(resource).then(function (worker) { return worker.findDocumentSymbols(resource.toString()); }).then(function (items) {\n            if (!items) {\n                return;\n            }\n            return items.map(function (item) { return ({\n                name: item.name,\n                containerName: item.containerName,\n                kind: toSymbolKind(item.kind),\n                location: toLocation(item.location)\n            }); });\n        }));\n    };\n    return DocumentSymbolAdapter;\n}());\n\nfunction fromFormattingOptions(options) {\n    return {\n        tabSize: options.tabSize,\n        insertSpaces: options.insertSpaces\n    };\n}\nvar DocumentFormattingEditProvider = /** @class */ (function () {\n    function DocumentFormattingEditProvider(_worker) {\n        this._worker = _worker;\n    }\n    DocumentFormattingEditProvider.prototype.provideDocumentFormattingEdits = function (model, options, token) {\n        var resource = model.uri;\n        return wireCancellationToken(token, this._worker(resource).then(function (worker) {\n            return worker.format(resource.toString(), null, fromFormattingOptions(options)).then(function (edits) {\n                if (!edits || edits.length === 0) {\n                    return;\n                }\n                return edits.map(toTextEdit);\n            });\n        }));\n    };\n    return DocumentFormattingEditProvider;\n}());\n\nvar DocumentRangeFormattingEditProvider = /** @class */ (function () {\n    function DocumentRangeFormattingEditProvider(_worker) {\n        this._worker = _worker;\n    }\n    DocumentRangeFormattingEditProvider.prototype.provideDocumentRangeFormattingEdits = function (model, range, options, token) {\n        var resource = model.uri;\n        return wireCancellationToken(token, this._worker(resource).then(function (worker) {\n            return worker.format(resource.toString(), fromRange(range), fromFormattingOptions(options)).then(function (edits) {\n                if (!edits || edits.length === 0) {\n                    return;\n                }\n                return edits.map(toTextEdit);\n            });\n        }));\n    };\n    return DocumentRangeFormattingEditProvider;\n}());\n\n/**\n * Hook a cancellation token to a WinJS Promise\n */\nfunction wireCancellationToken(token, promise) {\n    if (promise.cancel) {\n        token.onCancellationRequested(function () { return promise.cancel(); });\n    }\n    return promise;\n}\n\n\n/***/ }),\n\n/***/ 895:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* unused harmony export Position */\n/* unused harmony export Range */\n/* unused harmony export Location */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"b\", function() { return DiagnosticSeverity; });\n/* unused harmony export Diagnostic */\n/* unused harmony export Command */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"f\", function() { return TextEdit; });\n/* unused harmony export TextDocumentEdit */\n/* unused harmony export WorkspaceChange */\n/* unused harmony export TextDocumentIdentifier */\n/* unused harmony export VersionedTextDocumentIdentifier */\n/* unused harmony export TextDocumentItem */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"d\", function() { return MarkupKind; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return CompletionItemKind; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"c\", function() { return InsertTextFormat; });\n/* unused harmony export CompletionItem */\n/* unused harmony export CompletionList */\n/* unused harmony export MarkedString */\n/* unused harmony export ParameterInformation */\n/* unused harmony export SignatureInformation */\n/* unused harmony export DocumentHighlightKind */\n/* unused harmony export DocumentHighlight */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"e\", function() { return SymbolKind; });\n/* unused harmony export SymbolInformation */\n/* unused harmony export CodeActionContext */\n/* unused harmony export CodeLens */\n/* unused harmony export FormattingOptions */\n/* unused harmony export DocumentLink */\n/* unused harmony export EOL */\n/* unused harmony export TextDocument */\n/* unused harmony export TextDocumentSaveReason */\n/* --------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * ------------------------------------------------------------------------------------------ */\n\n/**\n * The Position namespace provides helper functions to work with\n * [Position](#Position) literals.\n */\nvar Position;\n(function (Position) {\n    /**\n     * Creates a new Position literal from the given line and character.\n     * @param line The position's line.\n     * @param character The position's character.\n     */\n    function create(line, character) {\n        return { line: line, character: character };\n    }\n    Position.create = create;\n    /**\n     * Checks whether the given liternal conforms to the [Position](#Position) interface.\n     */\n    function is(value) {\n        var candidate = value;\n        return Is.defined(candidate) && Is.number(candidate.line) && Is.number(candidate.character);\n    }\n    Position.is = is;\n})(Position || (Position = {}));\n/**\n * The Range namespace provides helper functions to work with\n * [Range](#Range) literals.\n */\nvar Range;\n(function (Range) {\n    function create(one, two, three, four) {\n        if (Is.number(one) && Is.number(two) && Is.number(three) && Is.number(four)) {\n            return { start: Position.create(one, two), end: Position.create(three, four) };\n        }\n        else if (Position.is(one) && Position.is(two)) {\n            return { start: one, end: two };\n        }\n        else {\n            throw new Error(\"Range#create called with invalid arguments[\" + one + \", \" + two + \", \" + three + \", \" + four + \"]\");\n        }\n    }\n    Range.create = create;\n    /**\n     * Checks whether the given literal conforms to the [Range](#Range) interface.\n     */\n    function is(value) {\n        var candidate = value;\n        return Is.defined(candidate) && Position.is(candidate.start) && Position.is(candidate.end);\n    }\n    Range.is = is;\n})(Range || (Range = {}));\n/**\n * The Location namespace provides helper functions to work with\n * [Location](#Location) literals.\n */\nvar Location;\n(function (Location) {\n    /**\n     * Creates a Location literal.\n     * @param uri The location's uri.\n     * @param range The location's range.\n     */\n    function create(uri, range) {\n        return { uri: uri, range: range };\n    }\n    Location.create = create;\n    /**\n     * Checks whether the given literal conforms to the [Location](#Location) interface.\n     */\n    function is(value) {\n        var candidate = value;\n        return Is.defined(candidate) && Range.is(candidate.range) && (Is.string(candidate.uri) || Is.undefined(candidate.uri));\n    }\n    Location.is = is;\n})(Location || (Location = {}));\n/**\n * The diagnostic's serverity.\n */\nvar DiagnosticSeverity;\n(function (DiagnosticSeverity) {\n    /**\n     * Reports an error.\n     */\n    DiagnosticSeverity.Error = 1;\n    /**\n     * Reports a warning.\n     */\n    DiagnosticSeverity.Warning = 2;\n    /**\n     * Reports an information.\n     */\n    DiagnosticSeverity.Information = 3;\n    /**\n     * Reports a hint.\n     */\n    DiagnosticSeverity.Hint = 4;\n})(DiagnosticSeverity || (DiagnosticSeverity = {}));\n/**\n * The Diagnostic namespace provides helper functions to work with\n * [Diagnostic](#Diagnostic) literals.\n */\nvar Diagnostic;\n(function (Diagnostic) {\n    /**\n     * Creates a new Diagnostic literal.\n     */\n    function create(range, message, severity, code, source) {\n        var result = { range: range, message: message };\n        if (Is.defined(severity)) {\n            result.severity = severity;\n        }\n        if (Is.defined(code)) {\n            result.code = code;\n        }\n        if (Is.defined(source)) {\n            result.source = source;\n        }\n        return result;\n    }\n    Diagnostic.create = create;\n    /**\n     * Checks whether the given literal conforms to the [Diagnostic](#Diagnostic) interface.\n     */\n    function is(value) {\n        var candidate = value;\n        return Is.defined(candidate)\n            && Range.is(candidate.range)\n            && Is.string(candidate.message)\n            && (Is.number(candidate.severity) || Is.undefined(candidate.severity))\n            && (Is.number(candidate.code) || Is.string(candidate.code) || Is.undefined(candidate.code))\n            && (Is.string(candidate.source) || Is.undefined(candidate.source));\n    }\n    Diagnostic.is = is;\n})(Diagnostic || (Diagnostic = {}));\n/**\n * The Command namespace provides helper functions to work with\n * [Command](#Command) literals.\n */\nvar Command;\n(function (Command) {\n    /**\n     * Creates a new Command literal.\n     */\n    function create(title, command) {\n        var args = [];\n        for (var _i = 2; _i < arguments.length; _i++) {\n            args[_i - 2] = arguments[_i];\n        }\n        var result = { title: title, command: command };\n        if (Is.defined(args) && args.length > 0) {\n            result.arguments = args;\n        }\n        return result;\n    }\n    Command.create = create;\n    /**\n     * Checks whether the given literal conforms to the [Command](#Command) interface.\n     */\n    function is(value) {\n        var candidate = value;\n        return Is.defined(candidate) && Is.string(candidate.title) && Is.string(candidate.title);\n    }\n    Command.is = is;\n})(Command || (Command = {}));\n/**\n * The TextEdit namespace provides helper function to create replace,\n * insert and delete edits more easily.\n */\nvar TextEdit;\n(function (TextEdit) {\n    /**\n     * Creates a replace text edit.\n     * @param range The range of text to be replaced.\n     * @param newText The new text.\n     */\n    function replace(range, newText) {\n        return { range: range, newText: newText };\n    }\n    TextEdit.replace = replace;\n    /**\n     * Creates a insert text edit.\n     * @param position The position to insert the text at.\n     * @param newText The text to be inserted.\n     */\n    function insert(position, newText) {\n        return { range: { start: position, end: position }, newText: newText };\n    }\n    TextEdit.insert = insert;\n    /**\n     * Creates a delete text edit.\n     * @param range The range of text to be deleted.\n     */\n    function del(range) {\n        return { range: range, newText: '' };\n    }\n    TextEdit.del = del;\n})(TextEdit || (TextEdit = {}));\n/**\n * The TextDocumentEdit namespace provides helper function to create\n * an edit that manipulates a text document.\n */\nvar TextDocumentEdit;\n(function (TextDocumentEdit) {\n    /**\n     * Creates a new `TextDocumentEdit`\n     */\n    function create(textDocument, edits) {\n        return { textDocument: textDocument, edits: edits };\n    }\n    TextDocumentEdit.create = create;\n    function is(value) {\n        var candidate = value;\n        return Is.defined(candidate)\n            && VersionedTextDocumentIdentifier.is(candidate.textDocument)\n            && Array.isArray(candidate.edits);\n    }\n    TextDocumentEdit.is = is;\n})(TextDocumentEdit || (TextDocumentEdit = {}));\nvar TextEditChangeImpl = /** @class */ (function () {\n    function TextEditChangeImpl(edits) {\n        this.edits = edits;\n    }\n    TextEditChangeImpl.prototype.insert = function (position, newText) {\n        this.edits.push(TextEdit.insert(position, newText));\n    };\n    TextEditChangeImpl.prototype.replace = function (range, newText) {\n        this.edits.push(TextEdit.replace(range, newText));\n    };\n    TextEditChangeImpl.prototype.delete = function (range) {\n        this.edits.push(TextEdit.del(range));\n    };\n    TextEditChangeImpl.prototype.add = function (edit) {\n        this.edits.push(edit);\n    };\n    TextEditChangeImpl.prototype.all = function () {\n        return this.edits;\n    };\n    TextEditChangeImpl.prototype.clear = function () {\n        this.edits.splice(0, this.edits.length);\n    };\n    return TextEditChangeImpl;\n}());\n/**\n * A workspace change helps constructing changes to a workspace.\n */\nvar WorkspaceChange = /** @class */ (function () {\n    function WorkspaceChange(workspaceEdit) {\n        var _this = this;\n        this._textEditChanges = Object.create(null);\n        if (workspaceEdit) {\n            this._workspaceEdit = workspaceEdit;\n            if (workspaceEdit.documentChanges) {\n                workspaceEdit.documentChanges.forEach(function (textDocumentEdit) {\n                    var textEditChange = new TextEditChangeImpl(textDocumentEdit.edits);\n                    _this._textEditChanges[textDocumentEdit.textDocument.uri] = textEditChange;\n                });\n            }\n            else if (workspaceEdit.changes) {\n                Object.keys(workspaceEdit.changes).forEach(function (key) {\n                    var textEditChange = new TextEditChangeImpl(workspaceEdit.changes[key]);\n                    _this._textEditChanges[key] = textEditChange;\n                });\n            }\n        }\n    }\n    Object.defineProperty(WorkspaceChange.prototype, \"edit\", {\n        /**\n         * Returns the underlying [WorkspaceEdit](#WorkspaceEdit) literal\n         * use to be returned from a workspace edit operation like rename.\n         */\n        get: function () {\n            return this._workspaceEdit;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    WorkspaceChange.prototype.getTextEditChange = function (key) {\n        if (VersionedTextDocumentIdentifier.is(key)) {\n            if (!this._workspaceEdit) {\n                this._workspaceEdit = {\n                    documentChanges: []\n                };\n            }\n            if (!this._workspaceEdit.documentChanges) {\n                throw new Error('Workspace edit is not configured for versioned document changes.');\n            }\n            var textDocument = key;\n            var result = this._textEditChanges[textDocument.uri];\n            if (!result) {\n                var edits = [];\n                var textDocumentEdit = {\n                    textDocument: textDocument,\n                    edits: edits\n                };\n                this._workspaceEdit.documentChanges.push(textDocumentEdit);\n                result = new TextEditChangeImpl(edits);\n                this._textEditChanges[textDocument.uri] = result;\n            }\n            return result;\n        }\n        else {\n            if (!this._workspaceEdit) {\n                this._workspaceEdit = {\n                    changes: Object.create(null)\n                };\n            }\n            if (!this._workspaceEdit.changes) {\n                throw new Error('Workspace edit is not configured for normal text edit changes.');\n            }\n            var result = this._textEditChanges[key];\n            if (!result) {\n                var edits = [];\n                this._workspaceEdit.changes[key] = edits;\n                result = new TextEditChangeImpl(edits);\n                this._textEditChanges[key] = result;\n            }\n            return result;\n        }\n    };\n    return WorkspaceChange;\n}());\n\n/**\n * The TextDocumentIdentifier namespace provides helper functions to work with\n * [TextDocumentIdentifier](#TextDocumentIdentifier) literals.\n */\nvar TextDocumentIdentifier;\n(function (TextDocumentIdentifier) {\n    /**\n     * Creates a new TextDocumentIdentifier literal.\n     * @param uri The document's uri.\n     */\n    function create(uri) {\n        return { uri: uri };\n    }\n    TextDocumentIdentifier.create = create;\n    /**\n     * Checks whether the given literal conforms to the [TextDocumentIdentifier](#TextDocumentIdentifier) interface.\n     */\n    function is(value) {\n        var candidate = value;\n        return Is.defined(candidate) && Is.string(candidate.uri);\n    }\n    TextDocumentIdentifier.is = is;\n})(TextDocumentIdentifier || (TextDocumentIdentifier = {}));\n/**\n * The VersionedTextDocumentIdentifier namespace provides helper functions to work with\n * [VersionedTextDocumentIdentifier](#VersionedTextDocumentIdentifier) literals.\n */\nvar VersionedTextDocumentIdentifier;\n(function (VersionedTextDocumentIdentifier) {\n    /**\n     * Creates a new VersionedTextDocumentIdentifier literal.\n     * @param uri The document's uri.\n     * @param uri The document's text.\n     */\n    function create(uri, version) {\n        return { uri: uri, version: version };\n    }\n    VersionedTextDocumentIdentifier.create = create;\n    /**\n     * Checks whether the given literal conforms to the [VersionedTextDocumentIdentifier](#VersionedTextDocumentIdentifier) interface.\n     */\n    function is(value) {\n        var candidate = value;\n        return Is.defined(candidate) && Is.string(candidate.uri) && Is.number(candidate.version);\n    }\n    VersionedTextDocumentIdentifier.is = is;\n})(VersionedTextDocumentIdentifier || (VersionedTextDocumentIdentifier = {}));\n/**\n * The TextDocumentItem namespace provides helper functions to work with\n * [TextDocumentItem](#TextDocumentItem) literals.\n */\nvar TextDocumentItem;\n(function (TextDocumentItem) {\n    /**\n     * Creates a new TextDocumentItem literal.\n     * @param uri The document's uri.\n     * @param languageId The document's language identifier.\n     * @param version The document's version number.\n     * @param text The document's text.\n     */\n    function create(uri, languageId, version, text) {\n        return { uri: uri, languageId: languageId, version: version, text: text };\n    }\n    TextDocumentItem.create = create;\n    /**\n     * Checks whether the given literal conforms to the [TextDocumentItem](#TextDocumentItem) interface.\n     */\n    function is(value) {\n        var candidate = value;\n        return Is.defined(candidate) && Is.string(candidate.uri) && Is.string(candidate.languageId) && Is.number(candidate.version) && Is.string(candidate.text);\n    }\n    TextDocumentItem.is = is;\n})(TextDocumentItem || (TextDocumentItem = {}));\n/**\n * Describes the content type that a client supports in various\n * result literals like `Hover`, `ParameterInfo` or `CompletionItem`.\n *\n * Please note that `MarkupKinds` must not start with a `$`. This kinds\n * are reserved for internal usage.\n */\nvar MarkupKind;\n(function (MarkupKind) {\n    /**\n     * Plain text is supported as a content format\n     */\n    MarkupKind.PlainText = 'plaintext';\n    /**\n     * Markdown is supported as a content format\n     */\n    MarkupKind.Markdown = 'markdown';\n})(MarkupKind || (MarkupKind = {}));\n/**\n * The kind of a completion entry.\n */\nvar CompletionItemKind;\n(function (CompletionItemKind) {\n    CompletionItemKind.Text = 1;\n    CompletionItemKind.Method = 2;\n    CompletionItemKind.Function = 3;\n    CompletionItemKind.Constructor = 4;\n    CompletionItemKind.Field = 5;\n    CompletionItemKind.Variable = 6;\n    CompletionItemKind.Class = 7;\n    CompletionItemKind.Interface = 8;\n    CompletionItemKind.Module = 9;\n    CompletionItemKind.Property = 10;\n    CompletionItemKind.Unit = 11;\n    CompletionItemKind.Value = 12;\n    CompletionItemKind.Enum = 13;\n    CompletionItemKind.Keyword = 14;\n    CompletionItemKind.Snippet = 15;\n    CompletionItemKind.Color = 16;\n    CompletionItemKind.File = 17;\n    CompletionItemKind.Reference = 18;\n    CompletionItemKind.Folder = 19;\n    CompletionItemKind.EnumMember = 20;\n    CompletionItemKind.Constant = 21;\n    CompletionItemKind.Struct = 22;\n    CompletionItemKind.Event = 23;\n    CompletionItemKind.Operator = 24;\n    CompletionItemKind.TypeParameter = 25;\n})(CompletionItemKind || (CompletionItemKind = {}));\n/**\n * Defines whether the insert text in a completion item should be interpreted as\n * plain text or a snippet.\n */\nvar InsertTextFormat;\n(function (InsertTextFormat) {\n    /**\n     * The primary text to be inserted is treated as a plain string.\n     */\n    InsertTextFormat.PlainText = 1;\n    /**\n     * The primary text to be inserted is treated as a snippet.\n     *\n     * A snippet can define tab stops and placeholders with `$1`, `$2`\n     * and `${3:foo}`. `$0` defines the final tab stop, it defaults to\n     * the end of the snippet. Placeholders with equal identifiers are linked,\n     * that is typing in one will update others too.\n     *\n     * See also: https://github.com/Microsoft/vscode/blob/master/src/vs/editor/contrib/snippet/common/snippet.md\n     */\n    InsertTextFormat.Snippet = 2;\n})(InsertTextFormat || (InsertTextFormat = {}));\n/**\n * The CompletionItem namespace provides functions to deal with\n * completion items.\n */\nvar CompletionItem;\n(function (CompletionItem) {\n    /**\n     * Create a completion item and seed it with a label.\n     * @param label The completion item's label\n     */\n    function create(label) {\n        return { label: label };\n    }\n    CompletionItem.create = create;\n})(CompletionItem || (CompletionItem = {}));\n/**\n * The CompletionList namespace provides functions to deal with\n * completion lists.\n */\nvar CompletionList;\n(function (CompletionList) {\n    /**\n     * Creates a new completion list.\n     *\n     * @param items The completion items.\n     * @param isIncomplete The list is not complete.\n     */\n    function create(items, isIncomplete) {\n        return { items: items ? items : [], isIncomplete: !!isIncomplete };\n    }\n    CompletionList.create = create;\n})(CompletionList || (CompletionList = {}));\nvar MarkedString;\n(function (MarkedString) {\n    /**\n     * Creates a marked string from plain text.\n     *\n     * @param plainText The plain text.\n     */\n    function fromPlainText(plainText) {\n        return plainText.replace(/[\\\\`*_{}[\\]()#+\\-.!]/g, \"\\\\$&\"); // escape markdown syntax tokens: http://daringfireball.net/projects/markdown/syntax#backslash\n    }\n    MarkedString.fromPlainText = fromPlainText;\n})(MarkedString || (MarkedString = {}));\n/**\n * The ParameterInformation namespace provides helper functions to work with\n * [ParameterInformation](#ParameterInformation) literals.\n */\nvar ParameterInformation;\n(function (ParameterInformation) {\n    /**\n     * Creates a new parameter information literal.\n     *\n     * @param label A label string.\n     * @param documentation A doc string.\n     */\n    function create(label, documentation) {\n        return documentation ? { label: label, documentation: documentation } : { label: label };\n    }\n    ParameterInformation.create = create;\n    ;\n})(ParameterInformation || (ParameterInformation = {}));\n/**\n * The SignatureInformation namespace provides helper functions to work with\n * [SignatureInformation](#SignatureInformation) literals.\n */\nvar SignatureInformation;\n(function (SignatureInformation) {\n    function create(label, documentation) {\n        var parameters = [];\n        for (var _i = 2; _i < arguments.length; _i++) {\n            parameters[_i - 2] = arguments[_i];\n        }\n        var result = { label: label };\n        if (Is.defined(documentation)) {\n            result.documentation = documentation;\n        }\n        if (Is.defined(parameters)) {\n            result.parameters = parameters;\n        }\n        else {\n            result.parameters = [];\n        }\n        return result;\n    }\n    SignatureInformation.create = create;\n})(SignatureInformation || (SignatureInformation = {}));\n/**\n * A document highlight kind.\n */\nvar DocumentHighlightKind;\n(function (DocumentHighlightKind) {\n    /**\n     * A textual occurrance.\n     */\n    DocumentHighlightKind.Text = 1;\n    /**\n     * Read-access of a symbol, like reading a variable.\n     */\n    DocumentHighlightKind.Read = 2;\n    /**\n     * Write-access of a symbol, like writing to a variable.\n     */\n    DocumentHighlightKind.Write = 3;\n})(DocumentHighlightKind || (DocumentHighlightKind = {}));\n/**\n * DocumentHighlight namespace to provide helper functions to work with\n * [DocumentHighlight](#DocumentHighlight) literals.\n */\nvar DocumentHighlight;\n(function (DocumentHighlight) {\n    /**\n     * Create a DocumentHighlight object.\n     * @param range The range the highlight applies to.\n     */\n    function create(range, kind) {\n        var result = { range: range };\n        if (Is.number(kind)) {\n            result.kind = kind;\n        }\n        return result;\n    }\n    DocumentHighlight.create = create;\n})(DocumentHighlight || (DocumentHighlight = {}));\n/**\n * A symbol kind.\n */\nvar SymbolKind;\n(function (SymbolKind) {\n    SymbolKind.File = 1;\n    SymbolKind.Module = 2;\n    SymbolKind.Namespace = 3;\n    SymbolKind.Package = 4;\n    SymbolKind.Class = 5;\n    SymbolKind.Method = 6;\n    SymbolKind.Property = 7;\n    SymbolKind.Field = 8;\n    SymbolKind.Constructor = 9;\n    SymbolKind.Enum = 10;\n    SymbolKind.Interface = 11;\n    SymbolKind.Function = 12;\n    SymbolKind.Variable = 13;\n    SymbolKind.Constant = 14;\n    SymbolKind.String = 15;\n    SymbolKind.Number = 16;\n    SymbolKind.Boolean = 17;\n    SymbolKind.Array = 18;\n    SymbolKind.Object = 19;\n    SymbolKind.Key = 20;\n    SymbolKind.Null = 21;\n    SymbolKind.EnumMember = 22;\n    SymbolKind.Struct = 23;\n    SymbolKind.Event = 24;\n    SymbolKind.Operator = 25;\n    SymbolKind.TypeParameter = 26;\n})(SymbolKind || (SymbolKind = {}));\nvar SymbolInformation;\n(function (SymbolInformation) {\n    /**\n     * Creates a new symbol information literal.\n     *\n     * @param name The name of the symbol.\n     * @param kind The kind of the symbol.\n     * @param range The range of the location of the symbol.\n     * @param uri The resource of the location of symbol, defaults to the current document.\n     * @param containerName The name of the symbol containg the symbol.\n     */\n    function create(name, kind, range, uri, containerName) {\n        var result = {\n            name: name,\n            kind: kind,\n            location: { uri: uri, range: range }\n        };\n        if (containerName) {\n            result.containerName = containerName;\n        }\n        return result;\n    }\n    SymbolInformation.create = create;\n})(SymbolInformation || (SymbolInformation = {}));\n/**\n * The CodeActionContext namespace provides helper functions to work with\n * [CodeActionContext](#CodeActionContext) literals.\n */\nvar CodeActionContext;\n(function (CodeActionContext) {\n    /**\n     * Creates a new CodeActionContext literal.\n     */\n    function create(diagnostics) {\n        return { diagnostics: diagnostics };\n    }\n    CodeActionContext.create = create;\n    /**\n     * Checks whether the given literal conforms to the [CodeActionContext](#CodeActionContext) interface.\n     */\n    function is(value) {\n        var candidate = value;\n        return Is.defined(candidate) && Is.typedArray(candidate.diagnostics, Diagnostic.is);\n    }\n    CodeActionContext.is = is;\n})(CodeActionContext || (CodeActionContext = {}));\n/**\n * The CodeLens namespace provides helper functions to work with\n * [CodeLens](#CodeLens) literals.\n */\nvar CodeLens;\n(function (CodeLens) {\n    /**\n     * Creates a new CodeLens literal.\n     */\n    function create(range, data) {\n        var result = { range: range };\n        if (Is.defined(data))\n            result.data = data;\n        return result;\n    }\n    CodeLens.create = create;\n    /**\n     * Checks whether the given literal conforms to the [CodeLens](#CodeLens) interface.\n     */\n    function is(value) {\n        var candidate = value;\n        return Is.defined(candidate) && Range.is(candidate.range) && (Is.undefined(candidate.command) || Command.is(candidate.command));\n    }\n    CodeLens.is = is;\n})(CodeLens || (CodeLens = {}));\n/**\n * The FormattingOptions namespace provides helper functions to work with\n * [FormattingOptions](#FormattingOptions) literals.\n */\nvar FormattingOptions;\n(function (FormattingOptions) {\n    /**\n     * Creates a new FormattingOptions literal.\n     */\n    function create(tabSize, insertSpaces) {\n        return { tabSize: tabSize, insertSpaces: insertSpaces };\n    }\n    FormattingOptions.create = create;\n    /**\n     * Checks whether the given literal conforms to the [FormattingOptions](#FormattingOptions) interface.\n     */\n    function is(value) {\n        var candidate = value;\n        return Is.defined(candidate) && Is.number(candidate.tabSize) && Is.boolean(candidate.insertSpaces);\n    }\n    FormattingOptions.is = is;\n})(FormattingOptions || (FormattingOptions = {}));\n/**\n * A document link is a range in a text document that links to an internal or external resource, like another\n * text document or a web site.\n */\nvar DocumentLink = /** @class */ (function () {\n    function DocumentLink() {\n    }\n    return DocumentLink;\n}());\n\n/**\n * The DocumentLink namespace provides helper functions to work with\n * [DocumentLink](#DocumentLink) literals.\n */\n(function (DocumentLink) {\n    /**\n     * Creates a new DocumentLink literal.\n     */\n    function create(range, target) {\n        return { range: range, target: target };\n    }\n    DocumentLink.create = create;\n    /**\n     * Checks whether the given literal conforms to the [DocumentLink](#DocumentLink) interface.\n     */\n    function is(value) {\n        var candidate = value;\n        return Is.defined(candidate) && Range.is(candidate.range) && (Is.undefined(candidate.target) || Is.string(candidate.target));\n    }\n    DocumentLink.is = is;\n})(DocumentLink || (DocumentLink = {}));\nvar EOL = ['\\n', '\\r\\n', '\\r'];\nvar TextDocument;\n(function (TextDocument) {\n    /**\n     * Creates a new ITextDocument literal from the given uri and content.\n     * @param uri The document's uri.\n     * @param languageId  The document's language Id.\n     * @param content The document's content.\n     */\n    function create(uri, languageId, version, content) {\n        return new FullTextDocument(uri, languageId, version, content);\n    }\n    TextDocument.create = create;\n    /**\n     * Checks whether the given literal conforms to the [ITextDocument](#ITextDocument) interface.\n     */\n    function is(value) {\n        var candidate = value;\n        return Is.defined(candidate) && Is.string(candidate.uri) && (Is.undefined(candidate.languageId) || Is.string(candidate.languageId)) && Is.number(candidate.lineCount)\n            && Is.func(candidate.getText) && Is.func(candidate.positionAt) && Is.func(candidate.offsetAt) ? true : false;\n    }\n    TextDocument.is = is;\n    function applyEdits(document, edits) {\n        var text = document.getText();\n        var sortedEdits = mergeSort(edits, function (a, b) {\n            var diff = a.range.start.line - b.range.start.line;\n            if (diff === 0) {\n                return a.range.start.character - b.range.start.character;\n            }\n            return 0;\n        });\n        var lastModifiedOffset = text.length;\n        for (var i = sortedEdits.length - 1; i >= 0; i--) {\n            var e = sortedEdits[i];\n            var startOffset = document.offsetAt(e.range.start);\n            var endOffset = document.offsetAt(e.range.end);\n            if (endOffset <= lastModifiedOffset) {\n                text = text.substring(0, startOffset) + e.newText + text.substring(endOffset, text.length);\n            }\n            else {\n                throw new Error('Ovelapping edit');\n            }\n            lastModifiedOffset = startOffset;\n        }\n        return text;\n    }\n    TextDocument.applyEdits = applyEdits;\n    function mergeSort(data, compare) {\n        if (data.length <= 1) {\n            // sorted\n            return data;\n        }\n        var p = (data.length / 2) | 0;\n        var left = data.slice(0, p);\n        var right = data.slice(p);\n        mergeSort(left, compare);\n        mergeSort(right, compare);\n        var leftIdx = 0;\n        var rightIdx = 0;\n        var i = 0;\n        while (leftIdx < left.length && rightIdx < right.length) {\n            var ret = compare(left[leftIdx], right[rightIdx]);\n            if (ret <= 0) {\n                // smaller_equal -> take left to preserve order\n                data[i++] = left[leftIdx++];\n            }\n            else {\n                // greater -> take right\n                data[i++] = right[rightIdx++];\n            }\n        }\n        while (leftIdx < left.length) {\n            data[i++] = left[leftIdx++];\n        }\n        while (rightIdx < right.length) {\n            data[i++] = right[rightIdx++];\n        }\n        return data;\n    }\n})(TextDocument || (TextDocument = {}));\n/**\n * Represents reasons why a text document is saved.\n */\nvar TextDocumentSaveReason;\n(function (TextDocumentSaveReason) {\n    /**\n     * Manually triggered, e.g. by the user pressing save, by starting debugging,\n     * or by an API call.\n     */\n    TextDocumentSaveReason.Manual = 1;\n    /**\n     * Automatic after a delay.\n     */\n    TextDocumentSaveReason.AfterDelay = 2;\n    /**\n     * When the editor lost focus.\n     */\n    TextDocumentSaveReason.FocusOut = 3;\n})(TextDocumentSaveReason || (TextDocumentSaveReason = {}));\nvar FullTextDocument = /** @class */ (function () {\n    function FullTextDocument(uri, languageId, version, content) {\n        this._uri = uri;\n        this._languageId = languageId;\n        this._version = version;\n        this._content = content;\n        this._lineOffsets = null;\n    }\n    Object.defineProperty(FullTextDocument.prototype, \"uri\", {\n        get: function () {\n            return this._uri;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FullTextDocument.prototype, \"languageId\", {\n        get: function () {\n            return this._languageId;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FullTextDocument.prototype, \"version\", {\n        get: function () {\n            return this._version;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    FullTextDocument.prototype.getText = function (range) {\n        if (range) {\n            var start = this.offsetAt(range.start);\n            var end = this.offsetAt(range.end);\n            return this._content.substring(start, end);\n        }\n        return this._content;\n    };\n    FullTextDocument.prototype.update = function (event, version) {\n        this._content = event.text;\n        this._version = version;\n        this._lineOffsets = null;\n    };\n    FullTextDocument.prototype.getLineOffsets = function () {\n        if (this._lineOffsets === null) {\n            var lineOffsets = [];\n            var text = this._content;\n            var isLineStart = true;\n            for (var i = 0; i < text.length; i++) {\n                if (isLineStart) {\n                    lineOffsets.push(i);\n                    isLineStart = false;\n                }\n                var ch = text.charAt(i);\n                isLineStart = (ch === '\\r' || ch === '\\n');\n                if (ch === '\\r' && i + 1 < text.length && text.charAt(i + 1) === '\\n') {\n                    i++;\n                }\n            }\n            if (isLineStart && text.length > 0) {\n                lineOffsets.push(text.length);\n            }\n            this._lineOffsets = lineOffsets;\n        }\n        return this._lineOffsets;\n    };\n    FullTextDocument.prototype.positionAt = function (offset) {\n        offset = Math.max(Math.min(offset, this._content.length), 0);\n        var lineOffsets = this.getLineOffsets();\n        var low = 0, high = lineOffsets.length;\n        if (high === 0) {\n            return Position.create(0, offset);\n        }\n        while (low < high) {\n            var mid = Math.floor((low + high) / 2);\n            if (lineOffsets[mid] > offset) {\n                high = mid;\n            }\n            else {\n                low = mid + 1;\n            }\n        }\n        // low is the least x for which the line offset is larger than the current offset\n        // or array.length if no line offset is larger than the current offset\n        var line = low - 1;\n        return Position.create(line, offset - lineOffsets[line]);\n    };\n    FullTextDocument.prototype.offsetAt = function (position) {\n        var lineOffsets = this.getLineOffsets();\n        if (position.line >= lineOffsets.length) {\n            return this._content.length;\n        }\n        else if (position.line < 0) {\n            return 0;\n        }\n        var lineOffset = lineOffsets[position.line];\n        var nextLineOffset = (position.line + 1 < lineOffsets.length) ? lineOffsets[position.line + 1] : this._content.length;\n        return Math.max(Math.min(lineOffset + position.character, nextLineOffset), lineOffset);\n    };\n    Object.defineProperty(FullTextDocument.prototype, \"lineCount\", {\n        get: function () {\n            return this.getLineOffsets().length;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return FullTextDocument;\n}());\nvar Is;\n(function (Is) {\n    var toString = Object.prototype.toString;\n    function defined(value) {\n        return typeof value !== 'undefined';\n    }\n    Is.defined = defined;\n    function undefined(value) {\n        return typeof value === 'undefined';\n    }\n    Is.undefined = undefined;\n    function boolean(value) {\n        return value === true || value === false;\n    }\n    Is.boolean = boolean;\n    function string(value) {\n        return toString.call(value) === '[object String]';\n    }\n    Is.string = string;\n    function number(value) {\n        return toString.call(value) === '[object Number]';\n    }\n    Is.number = number;\n    function func(value) {\n        return toString.call(value) === '[object Function]';\n    }\n    Is.func = func;\n    function typedArray(value, check) {\n        return Array.isArray(value) && value.every(check);\n    }\n    Is.typedArray = typedArray;\n})(Is || (Is = {}));\n\n\n/***/ }),\n\n/***/ 896:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (immutable) */ __webpack_exports__[\"a\"] = createTokenizationSupport;\n/* unused harmony export TOKEN_DELIM_OBJECT */\n/* unused harmony export TOKEN_DELIM_ARRAY */\n/* unused harmony export TOKEN_DELIM_COLON */\n/* unused harmony export TOKEN_DELIM_COMMA */\n/* unused harmony export TOKEN_VALUE_BOOLEAN */\n/* unused harmony export TOKEN_VALUE_NULL */\n/* unused harmony export TOKEN_VALUE_STRING */\n/* unused harmony export TOKEN_VALUE_NUMBER */\n/* unused harmony export TOKEN_PROPERTY_NAME */\n/* unused harmony export TOKEN_COMMENT_BLOCK */\n/* unused harmony export TOKEN_COMMENT_LINE */\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__deps_jsonc_parser_main_js__ = __webpack_require__(897);\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n\nfunction createTokenizationSupport(supportComments) {\n    return {\n        getInitialState: function () { return new JSONState(null, null, false); },\n        tokenize: function (line, state, offsetDelta, stopAtOffset) { return tokenize(supportComments, line, state, offsetDelta, stopAtOffset); }\n    };\n}\nvar TOKEN_DELIM_OBJECT = 'delimiter.bracket.json';\nvar TOKEN_DELIM_ARRAY = 'delimiter.array.json';\nvar TOKEN_DELIM_COLON = 'delimiter.colon.json';\nvar TOKEN_DELIM_COMMA = 'delimiter.comma.json';\nvar TOKEN_VALUE_BOOLEAN = 'keyword.json';\nvar TOKEN_VALUE_NULL = 'keyword.json';\nvar TOKEN_VALUE_STRING = 'string.value.json';\nvar TOKEN_VALUE_NUMBER = 'number.json';\nvar TOKEN_PROPERTY_NAME = 'string.key.json';\nvar TOKEN_COMMENT_BLOCK = 'comment.block.json';\nvar TOKEN_COMMENT_LINE = 'comment.line.json';\nvar JSONState = /** @class */ (function () {\n    function JSONState(state, scanError, lastWasColon) {\n        this._state = state;\n        this.scanError = scanError;\n        this.lastWasColon = lastWasColon;\n    }\n    JSONState.prototype.clone = function () {\n        return new JSONState(this._state, this.scanError, this.lastWasColon);\n    };\n    JSONState.prototype.equals = function (other) {\n        if (other === this) {\n            return true;\n        }\n        if (!other || !(other instanceof JSONState)) {\n            return false;\n        }\n        return this.scanError === other.scanError &&\n            this.lastWasColon === other.lastWasColon;\n    };\n    JSONState.prototype.getStateData = function () {\n        return this._state;\n    };\n    JSONState.prototype.setStateData = function (state) {\n        this._state = state;\n    };\n    return JSONState;\n}());\nfunction tokenize(comments, line, state, offsetDelta, stopAtOffset) {\n    if (offsetDelta === void 0) { offsetDelta = 0; }\n    // handle multiline strings and block comments\n    var numberOfInsertedCharacters = 0, adjustOffset = false;\n    switch (state.scanError) {\n        case 2 /* UnexpectedEndOfString */:\n            line = '\"' + line;\n            numberOfInsertedCharacters = 1;\n            break;\n        case 1 /* UnexpectedEndOfComment */:\n            line = '/*' + line;\n            numberOfInsertedCharacters = 2;\n            break;\n    }\n    var scanner = __WEBPACK_IMPORTED_MODULE_0__deps_jsonc_parser_main_js__[\"a\" /* createScanner */](line), kind, ret, lastWasColon = state.lastWasColon;\n    ret = {\n        tokens: [],\n        endState: state.clone()\n    };\n    while (true) {\n        var offset = offsetDelta + scanner.getPosition(), type = '';\n        kind = scanner.scan();\n        if (kind === 17 /* EOF */) {\n            break;\n        }\n        // Check that the scanner has advanced\n        if (offset === offsetDelta + scanner.getPosition()) {\n            throw new Error('Scanner did not advance, next 3 characters are: ' + line.substr(scanner.getPosition(), 3));\n        }\n        // In case we inserted /* or \" character, we need to\n        // adjust the offset of all tokens (except the first)\n        if (adjustOffset) {\n            offset -= numberOfInsertedCharacters;\n        }\n        adjustOffset = numberOfInsertedCharacters > 0;\n        // brackets and type\n        switch (kind) {\n            case 1 /* OpenBraceToken */:\n                type = TOKEN_DELIM_OBJECT;\n                lastWasColon = false;\n                break;\n            case 2 /* CloseBraceToken */:\n                type = TOKEN_DELIM_OBJECT;\n                lastWasColon = false;\n                break;\n            case 3 /* OpenBracketToken */:\n                type = TOKEN_DELIM_ARRAY;\n                lastWasColon = false;\n                break;\n            case 4 /* CloseBracketToken */:\n                type = TOKEN_DELIM_ARRAY;\n                lastWasColon = false;\n                break;\n            case 6 /* ColonToken */:\n                type = TOKEN_DELIM_COLON;\n                lastWasColon = true;\n                break;\n            case 5 /* CommaToken */:\n                type = TOKEN_DELIM_COMMA;\n                lastWasColon = false;\n                break;\n            case 8 /* TrueKeyword */:\n            case 9 /* FalseKeyword */:\n                type = TOKEN_VALUE_BOOLEAN;\n                lastWasColon = false;\n                break;\n            case 7 /* NullKeyword */:\n                type = TOKEN_VALUE_NULL;\n                lastWasColon = false;\n                break;\n            case 10 /* StringLiteral */:\n                type = lastWasColon ? TOKEN_VALUE_STRING : TOKEN_PROPERTY_NAME;\n                lastWasColon = false;\n                break;\n            case 11 /* NumericLiteral */:\n                type = TOKEN_VALUE_NUMBER;\n                lastWasColon = false;\n                break;\n        }\n        // comments, iff enabled\n        if (comments) {\n            switch (kind) {\n                case 12 /* LineCommentTrivia */:\n                    type = TOKEN_COMMENT_LINE;\n                    break;\n                case 13 /* BlockCommentTrivia */:\n                    type = TOKEN_COMMENT_BLOCK;\n                    break;\n            }\n        }\n        ret.endState = new JSONState(state.getStateData(), scanner.getTokenError(), lastWasColon);\n        ret.tokens.push({\n            startIndex: offset,\n            scopes: type\n        });\n    }\n    return ret;\n}\n\n\n/***/ }),\n\n/***/ 897:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return createScanner; });\n/* unused harmony export getLocation */\n/* unused harmony export parse */\n/* unused harmony export parseTree */\n/* unused harmony export findNodeAtLocation */\n/* unused harmony export getNodeValue */\n/* unused harmony export visit */\n/* unused harmony export stripComments */\n/* unused harmony export format */\n/* unused harmony export modify */\n/* unused harmony export applyEdits */\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__impl_format_js__ = __webpack_require__(788);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__impl_edit_js__ = __webpack_require__(898);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__impl_scanner_js__ = __webpack_require__(746);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__impl_parser_js__ = __webpack_require__(789);\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n\n\n\n\n/**\n * Creates a JSON scanner on the given text.\n * If ignoreTrivia is set, whitespaces or comments are ignored.\n */\nvar createScanner = __WEBPACK_IMPORTED_MODULE_2__impl_scanner_js__[\"a\" /* createScanner */];\n/**\n * For a given offset, evaluate the location in the JSON document. Each segment in the location path is either a property name or an array index.\n */\nvar getLocation = __WEBPACK_IMPORTED_MODULE_3__impl_parser_js__[\"b\" /* getLocation */];\n/**\n * Parses the given text and returns the object the JSON content represents. On invalid input, the parser tries to be as fault tolerant as possible, but still return a result.\n * Therefore always check the errors list to find out if the input was valid.\n */\nvar parse = __WEBPACK_IMPORTED_MODULE_3__impl_parser_js__[\"d\" /* parse */];\n/**\n * Parses the given text and returns a tree representation the JSON content. On invalid input, the parser tries to be as fault tolerant as possible, but still return a result.\n */\nvar parseTree = __WEBPACK_IMPORTED_MODULE_3__impl_parser_js__[\"e\" /* parseTree */];\n/**\n * Finds the node at the given path in a JSON DOM.\n */\nvar findNodeAtLocation = __WEBPACK_IMPORTED_MODULE_3__impl_parser_js__[\"a\" /* findNodeAtLocation */];\n/**\n * Evaluates the JavaScript object of the given JSON DOM node\n */\nvar getNodeValue = __WEBPACK_IMPORTED_MODULE_3__impl_parser_js__[\"c\" /* getNodeValue */];\n/**\n * Parses the given text and invokes the visitor functions for each object, array and literal reached.\n */\nvar visit = __WEBPACK_IMPORTED_MODULE_3__impl_parser_js__[\"g\" /* visit */];\n/**\n * Takes JSON with JavaScript-style comments and remove\n * them. Optionally replaces every none-newline character\n * of comments with a replaceCharacter\n */\nvar stripComments = __WEBPACK_IMPORTED_MODULE_3__impl_parser_js__[\"f\" /* stripComments */];\n/**\n * Computes the edits needed to format a JSON document.\n *\n * @param documentText The input text\n * @param range The range to format or `undefined` to format the full content\n * @param options The formatting options\n * @returns A list of edit operations describing the formatting changes to the original document. Edits can be either inserts, replacements or\n * removals of text segments. All offsets refer to the original state of the document. No two edits must change or remove the same range of\n * text in the original document. However, multiple edits can have\n * the same offset, for example multiple inserts, or an insert followed by a remove or replace. The order in the array defines which edit is applied first.\n * To apply edits to an input, you can use `applyEdits`\n */\nfunction format(documentText, range, options) {\n    return __WEBPACK_IMPORTED_MODULE_0__impl_format_js__[\"a\" /* format */](documentText, range, options);\n}\n/**\n * Computes the edits needed to modify a value in the JSON document.\n *\n * @param documentText The input text\n * @param path The path of the value to change. The path represents either to the document root, a property or an array item.\n * If the path points to an non-existing property or item, it will be created.\n * @param value The new value for the specified property or item. If the value is undefined,\n * the property or item will be removed.\n * @param options Options\n * @returns A list of edit operations describing the formatting changes to the original document. Edits can be either inserts, replacements or\n * removals of text segments. All offsets refer to the original state of the document. No two edits must change or remove the same range of\n * text in the original document. However, multiple edits can have\n * the same offset, for example multiple inserts, or an insert followed by a remove or replace. The order in the array defines which edit is applied first.\n * To apply edits to an input, you can use `applyEdits`\n */\nfunction modify(text, path, value, options) {\n    return __WEBPACK_IMPORTED_MODULE_1__impl_edit_js__[\"b\" /* setProperty */](text, path, value, options.formattingOptions, options.getInsertionIndex);\n}\n/**\n * Applies edits to a input string.\n */\nfunction applyEdits(text, edits) {\n    for (var i = edits.length - 1; i >= 0; i--) {\n        text = __WEBPACK_IMPORTED_MODULE_1__impl_edit_js__[\"a\" /* applyEdit */](text, edits[i]);\n    }\n    return text;\n}\n//# sourceMappingURL=main.js.map\n\n/***/ }),\n\n/***/ 898:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* unused harmony export removeProperty */\n/* harmony export (immutable) */ __webpack_exports__[\"b\"] = setProperty;\n/* harmony export (immutable) */ __webpack_exports__[\"a\"] = applyEdit;\n/* unused harmony export isWS */\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__format_js__ = __webpack_require__(788);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__parser_js__ = __webpack_require__(789);\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n\n\nfunction removeProperty(text, path, formattingOptions) {\n    return setProperty(text, path, void 0, formattingOptions);\n}\nfunction setProperty(text, path, value, formattingOptions, getInsertionIndex) {\n    var errors = [];\n    var root = Object(__WEBPACK_IMPORTED_MODULE_1__parser_js__[\"e\" /* parseTree */])(text, errors);\n    var parent = void 0;\n    var lastSegment = void 0;\n    while (path.length > 0) {\n        lastSegment = path.pop();\n        parent = Object(__WEBPACK_IMPORTED_MODULE_1__parser_js__[\"a\" /* findNodeAtLocation */])(root, path);\n        if (parent === void 0 && value !== void 0) {\n            if (typeof lastSegment === 'string') {\n                value = (_a = {}, _a[lastSegment] = value, _a);\n            }\n            else {\n                value = [value];\n            }\n        }\n        else {\n            break;\n        }\n    }\n    if (!parent) {\n        // empty document\n        if (value === void 0) {\n            throw new Error('Can not delete in empty document');\n        }\n        return withFormatting(text, { offset: root ? root.offset : 0, length: root ? root.length : 0, content: JSON.stringify(value) }, formattingOptions);\n    }\n    else if (parent.type === 'object' && typeof lastSegment === 'string' && Array.isArray(parent.children)) {\n        var existing = Object(__WEBPACK_IMPORTED_MODULE_1__parser_js__[\"a\" /* findNodeAtLocation */])(parent, [lastSegment]);\n        if (existing !== void 0) {\n            if (value === void 0) {\n                if (!existing.parent) {\n                    throw new Error('Malformed AST');\n                }\n                var propertyIndex = parent.children.indexOf(existing.parent);\n                var removeBegin = void 0;\n                var removeEnd = existing.parent.offset + existing.parent.length;\n                if (propertyIndex > 0) {\n                    // remove the comma of the previous node\n                    var previous = parent.children[propertyIndex - 1];\n                    removeBegin = previous.offset + previous.length;\n                }\n                else {\n                    removeBegin = parent.offset + 1;\n                    if (parent.children.length > 1) {\n                        // remove the comma of the next node\n                        var next = parent.children[1];\n                        removeEnd = next.offset;\n                    }\n                }\n                return withFormatting(text, { offset: removeBegin, length: removeEnd - removeBegin, content: '' }, formattingOptions);\n            }\n            else {\n                // set value of existing property\n                return withFormatting(text, { offset: existing.offset, length: existing.length, content: JSON.stringify(value) }, formattingOptions);\n            }\n        }\n        else {\n            if (value === void 0) {\n                return []; // property does not exist, nothing to do\n            }\n            var newProperty = JSON.stringify(lastSegment) + \": \" + JSON.stringify(value);\n            var index = getInsertionIndex ? getInsertionIndex(parent.children.map(function (p) { return p.children[0].value; })) : parent.children.length;\n            var edit = void 0;\n            if (index > 0) {\n                var previous = parent.children[index - 1];\n                edit = { offset: previous.offset + previous.length, length: 0, content: ',' + newProperty };\n            }\n            else if (parent.children.length === 0) {\n                edit = { offset: parent.offset + 1, length: 0, content: newProperty };\n            }\n            else {\n                edit = { offset: parent.offset + 1, length: 0, content: newProperty + ',' };\n            }\n            return withFormatting(text, edit, formattingOptions);\n        }\n    }\n    else if (parent.type === 'array' && typeof lastSegment === 'number' && Array.isArray(parent.children)) {\n        var insertIndex = lastSegment;\n        if (insertIndex === -1) {\n            // Insert\n            var newProperty = \"\" + JSON.stringify(value);\n            var edit = void 0;\n            if (parent.children.length === 0) {\n                edit = { offset: parent.offset + 1, length: 0, content: newProperty };\n            }\n            else {\n                var previous = parent.children[parent.children.length - 1];\n                edit = { offset: previous.offset + previous.length, length: 0, content: ',' + newProperty };\n            }\n            return withFormatting(text, edit, formattingOptions);\n        }\n        else {\n            if (value === void 0 && parent.children.length >= 0) {\n                //Removal\n                var removalIndex = lastSegment;\n                var toRemove = parent.children[removalIndex];\n                var edit = void 0;\n                if (parent.children.length === 1) {\n                    // only item\n                    edit = { offset: parent.offset + 1, length: parent.length - 2, content: '' };\n                }\n                else if (parent.children.length - 1 === removalIndex) {\n                    // last item\n                    var previous = parent.children[removalIndex - 1];\n                    var offset = previous.offset + previous.length;\n                    var parentEndOffset = parent.offset + parent.length;\n                    edit = { offset: offset, length: parentEndOffset - 2 - offset, content: '' };\n                }\n                else {\n                    edit = { offset: toRemove.offset, length: parent.children[removalIndex + 1].offset - toRemove.offset, content: '' };\n                }\n                return withFormatting(text, edit, formattingOptions);\n            }\n            else {\n                throw new Error('Array modification not supported yet');\n            }\n        }\n    }\n    else {\n        throw new Error(\"Can not add \" + (typeof lastSegment !== 'number' ? 'index' : 'property') + \" to parent of type \" + parent.type);\n    }\n    var _a;\n}\nfunction withFormatting(text, edit, formattingOptions) {\n    // apply the edit\n    var newText = applyEdit(text, edit);\n    // format the new text\n    var begin = edit.offset;\n    var end = edit.offset + edit.content.length;\n    if (edit.length === 0 || edit.content.length === 0) {\n        while (begin > 0 && !Object(__WEBPACK_IMPORTED_MODULE_0__format_js__[\"b\" /* isEOL */])(newText, begin - 1)) {\n            begin--;\n        }\n        while (end < newText.length && !Object(__WEBPACK_IMPORTED_MODULE_0__format_js__[\"b\" /* isEOL */])(newText, end)) {\n            end++;\n        }\n    }\n    var edits = Object(__WEBPACK_IMPORTED_MODULE_0__format_js__[\"a\" /* format */])(newText, { offset: begin, length: end - begin }, formattingOptions);\n    // apply the formatting edits and track the begin and end offsets of the changes\n    for (var i = edits.length - 1; i >= 0; i--) {\n        var edit_1 = edits[i];\n        newText = applyEdit(newText, edit_1);\n        begin = Math.min(begin, edit_1.offset);\n        end = Math.max(end, edit_1.offset + edit_1.length);\n        end += edit_1.content.length - edit_1.length;\n    }\n    // create a single edit with all changes\n    var editLength = text.length - (newText.length - end) - begin;\n    return [{ offset: begin, length: editLength, content: newText.substring(begin, end) }];\n}\nfunction applyEdit(text, edit) {\n    return text.substring(0, edit.offset) + edit.content + text.substring(edit.offset + edit.length);\n}\nfunction isWS(text, offset) {\n    return '\\r\\n \\t'.indexOf(text.charAt(offset)) !== -1;\n}\n//# sourceMappingURL=edit.js.map\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// static/js/2.481f7fdd.chunk.js","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\nimport { WorkerManager } from './workerManager.js';\nimport * as languageFeatures from './languageFeatures.js';\nimport { createTokenizationSupport } from './tokenization.js';\nexport function setupMode(defaults) {\n    var disposables = [];\n    var client = new WorkerManager(defaults);\n    disposables.push(client);\n    var worker = function () {\n        var uris = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            uris[_i] = arguments[_i];\n        }\n        return client.getLanguageServiceWorker.apply(client, uris);\n    };\n    var languageId = defaults.languageId;\n    disposables.push(monaco.languages.registerCompletionItemProvider(languageId, new languageFeatures.CompletionAdapter(worker)));\n    disposables.push(monaco.languages.registerHoverProvider(languageId, new languageFeatures.HoverAdapter(worker)));\n    disposables.push(monaco.languages.registerDocumentSymbolProvider(languageId, new languageFeatures.DocumentSymbolAdapter(worker)));\n    disposables.push(monaco.languages.registerDocumentFormattingEditProvider(languageId, new languageFeatures.DocumentFormattingEditProvider(worker)));\n    disposables.push(monaco.languages.registerDocumentRangeFormattingEditProvider(languageId, new languageFeatures.DocumentRangeFormattingEditProvider(worker)));\n    disposables.push(new languageFeatures.DiagnostcsAdapter(languageId, worker));\n    disposables.push(monaco.languages.setTokensProvider(languageId, createTokenizationSupport(true)));\n    disposables.push(monaco.languages.setLanguageConfiguration(languageId, richEditConfiguration));\n}\nvar richEditConfiguration = {\n    wordPattern: /(-?\\d*\\.\\d\\w*)|([^\\[\\{\\]\\}\\:\\\"\\,\\s]+)/g,\n    comments: {\n        lineComment: '//',\n        blockComment: ['/*', '*/']\n    },\n    brackets: [\n        ['{', '}'],\n        ['[', ']']\n    ],\n    autoClosingPairs: [\n        { open: '{', close: '}', notIn: ['string'] },\n        { open: '[', close: ']', notIn: ['string'] },\n        { open: '\"', close: '\"', notIn: ['string'] }\n    ]\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/monaco-editor/esm/vs/language/json/jsonMode.js\n// module id = 670\n// module chunks = 2","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n/**\n * Creates a JSON scanner on the given text.\n * If ignoreTrivia is set, whitespaces or comments are ignored.\n */\nexport function createScanner(text, ignoreTrivia) {\n    if (ignoreTrivia === void 0) { ignoreTrivia = false; }\n    var pos = 0, len = text.length, value = '', tokenOffset = 0, token = 16 /* Unknown */, scanError = 0 /* None */;\n    function scanHexDigits(count, exact) {\n        var digits = 0;\n        var value = 0;\n        while (digits < count || !exact) {\n            var ch = text.charCodeAt(pos);\n            if (ch >= 48 /* _0 */ && ch <= 57 /* _9 */) {\n                value = value * 16 + ch - 48 /* _0 */;\n            }\n            else if (ch >= 65 /* A */ && ch <= 70 /* F */) {\n                value = value * 16 + ch - 65 /* A */ + 10;\n            }\n            else if (ch >= 97 /* a */ && ch <= 102 /* f */) {\n                value = value * 16 + ch - 97 /* a */ + 10;\n            }\n            else {\n                break;\n            }\n            pos++;\n            digits++;\n        }\n        if (digits < count) {\n            value = -1;\n        }\n        return value;\n    }\n    function setPosition(newPosition) {\n        pos = newPosition;\n        value = '';\n        tokenOffset = 0;\n        token = 16 /* Unknown */;\n        scanError = 0 /* None */;\n    }\n    function scanNumber() {\n        var start = pos;\n        if (text.charCodeAt(pos) === 48 /* _0 */) {\n            pos++;\n        }\n        else {\n            pos++;\n            while (pos < text.length && isDigit(text.charCodeAt(pos))) {\n                pos++;\n            }\n        }\n        if (pos < text.length && text.charCodeAt(pos) === 46 /* dot */) {\n            pos++;\n            if (pos < text.length && isDigit(text.charCodeAt(pos))) {\n                pos++;\n                while (pos < text.length && isDigit(text.charCodeAt(pos))) {\n                    pos++;\n                }\n            }\n            else {\n                scanError = 3 /* UnexpectedEndOfNumber */;\n                return text.substring(start, pos);\n            }\n        }\n        var end = pos;\n        if (pos < text.length && (text.charCodeAt(pos) === 69 /* E */ || text.charCodeAt(pos) === 101 /* e */)) {\n            pos++;\n            if (pos < text.length && text.charCodeAt(pos) === 43 /* plus */ || text.charCodeAt(pos) === 45 /* minus */) {\n                pos++;\n            }\n            if (pos < text.length && isDigit(text.charCodeAt(pos))) {\n                pos++;\n                while (pos < text.length && isDigit(text.charCodeAt(pos))) {\n                    pos++;\n                }\n                end = pos;\n            }\n            else {\n                scanError = 3 /* UnexpectedEndOfNumber */;\n            }\n        }\n        return text.substring(start, end);\n    }\n    function scanString() {\n        var result = '', start = pos;\n        while (true) {\n            if (pos >= len) {\n                result += text.substring(start, pos);\n                scanError = 2 /* UnexpectedEndOfString */;\n                break;\n            }\n            var ch = text.charCodeAt(pos);\n            if (ch === 34 /* doubleQuote */) {\n                result += text.substring(start, pos);\n                pos++;\n                break;\n            }\n            if (ch === 92 /* backslash */) {\n                result += text.substring(start, pos);\n                pos++;\n                if (pos >= len) {\n                    scanError = 2 /* UnexpectedEndOfString */;\n                    break;\n                }\n                ch = text.charCodeAt(pos++);\n                switch (ch) {\n                    case 34 /* doubleQuote */:\n                        result += '\\\"';\n                        break;\n                    case 92 /* backslash */:\n                        result += '\\\\';\n                        break;\n                    case 47 /* slash */:\n                        result += '/';\n                        break;\n                    case 98 /* b */:\n                        result += '\\b';\n                        break;\n                    case 102 /* f */:\n                        result += '\\f';\n                        break;\n                    case 110 /* n */:\n                        result += '\\n';\n                        break;\n                    case 114 /* r */:\n                        result += '\\r';\n                        break;\n                    case 116 /* t */:\n                        result += '\\t';\n                        break;\n                    case 117 /* u */:\n                        var ch_1 = scanHexDigits(4, true);\n                        if (ch_1 >= 0) {\n                            result += String.fromCharCode(ch_1);\n                        }\n                        else {\n                            scanError = 4 /* InvalidUnicode */;\n                        }\n                        break;\n                    default:\n                        scanError = 5 /* InvalidEscapeCharacter */;\n                }\n                start = pos;\n                continue;\n            }\n            if (ch >= 0 && ch <= 0x1f) {\n                if (isLineBreak(ch)) {\n                    result += text.substring(start, pos);\n                    scanError = 2 /* UnexpectedEndOfString */;\n                    break;\n                }\n                else {\n                    scanError = 6 /* InvalidCharacter */;\n                    // mark as error but continue with string\n                }\n            }\n            pos++;\n        }\n        return result;\n    }\n    function scanNext() {\n        value = '';\n        scanError = 0 /* None */;\n        tokenOffset = pos;\n        if (pos >= len) {\n            // at the end\n            tokenOffset = len;\n            return token = 17 /* EOF */;\n        }\n        var code = text.charCodeAt(pos);\n        // trivia: whitespace\n        if (isWhiteSpace(code)) {\n            do {\n                pos++;\n                value += String.fromCharCode(code);\n                code = text.charCodeAt(pos);\n            } while (isWhiteSpace(code));\n            return token = 15 /* Trivia */;\n        }\n        // trivia: newlines\n        if (isLineBreak(code)) {\n            pos++;\n            value += String.fromCharCode(code);\n            if (code === 13 /* carriageReturn */ && text.charCodeAt(pos) === 10 /* lineFeed */) {\n                pos++;\n                value += '\\n';\n            }\n            return token = 14 /* LineBreakTrivia */;\n        }\n        switch (code) {\n            // tokens: []{}:,\n            case 123 /* openBrace */:\n                pos++;\n                return token = 1 /* OpenBraceToken */;\n            case 125 /* closeBrace */:\n                pos++;\n                return token = 2 /* CloseBraceToken */;\n            case 91 /* openBracket */:\n                pos++;\n                return token = 3 /* OpenBracketToken */;\n            case 93 /* closeBracket */:\n                pos++;\n                return token = 4 /* CloseBracketToken */;\n            case 58 /* colon */:\n                pos++;\n                return token = 6 /* ColonToken */;\n            case 44 /* comma */:\n                pos++;\n                return token = 5 /* CommaToken */;\n            // strings\n            case 34 /* doubleQuote */:\n                pos++;\n                value = scanString();\n                return token = 10 /* StringLiteral */;\n            // comments\n            case 47 /* slash */:\n                var start = pos - 1;\n                // Single-line comment\n                if (text.charCodeAt(pos + 1) === 47 /* slash */) {\n                    pos += 2;\n                    while (pos < len) {\n                        if (isLineBreak(text.charCodeAt(pos))) {\n                            break;\n                        }\n                        pos++;\n                    }\n                    value = text.substring(start, pos);\n                    return token = 12 /* LineCommentTrivia */;\n                }\n                // Multi-line comment\n                if (text.charCodeAt(pos + 1) === 42 /* asterisk */) {\n                    pos += 2;\n                    var commentClosed = false;\n                    while (pos < len) {\n                        var ch = text.charCodeAt(pos);\n                        if (ch === 42 /* asterisk */ && (pos + 1 < len) && text.charCodeAt(pos + 1) === 47 /* slash */) {\n                            pos += 2;\n                            commentClosed = true;\n                            break;\n                        }\n                        pos++;\n                    }\n                    if (!commentClosed) {\n                        pos++;\n                        scanError = 1 /* UnexpectedEndOfComment */;\n                    }\n                    value = text.substring(start, pos);\n                    return token = 13 /* BlockCommentTrivia */;\n                }\n                // just a single slash\n                value += String.fromCharCode(code);\n                pos++;\n                return token = 16 /* Unknown */;\n            // numbers\n            case 45 /* minus */:\n                value += String.fromCharCode(code);\n                pos++;\n                if (pos === len || !isDigit(text.charCodeAt(pos))) {\n                    return token = 16 /* Unknown */;\n                }\n            // found a minus, followed by a number so\n            // we fall through to proceed with scanning\n            // numbers\n            case 48 /* _0 */:\n            case 49 /* _1 */:\n            case 50 /* _2 */:\n            case 51 /* _3 */:\n            case 52 /* _4 */:\n            case 53 /* _5 */:\n            case 54 /* _6 */:\n            case 55 /* _7 */:\n            case 56 /* _8 */:\n            case 57 /* _9 */:\n                value += scanNumber();\n                return token = 11 /* NumericLiteral */;\n            // literals and unknown symbols\n            default:\n                // is a literal? Read the full word.\n                while (pos < len && isUnknownContentCharacter(code)) {\n                    pos++;\n                    code = text.charCodeAt(pos);\n                }\n                if (tokenOffset !== pos) {\n                    value = text.substring(tokenOffset, pos);\n                    // keywords: true, false, null\n                    switch (value) {\n                        case 'true': return token = 8 /* TrueKeyword */;\n                        case 'false': return token = 9 /* FalseKeyword */;\n                        case 'null': return token = 7 /* NullKeyword */;\n                    }\n                    return token = 16 /* Unknown */;\n                }\n                // some\n                value += String.fromCharCode(code);\n                pos++;\n                return token = 16 /* Unknown */;\n        }\n    }\n    function isUnknownContentCharacter(code) {\n        if (isWhiteSpace(code) || isLineBreak(code)) {\n            return false;\n        }\n        switch (code) {\n            case 125 /* closeBrace */:\n            case 93 /* closeBracket */:\n            case 123 /* openBrace */:\n            case 91 /* openBracket */:\n            case 34 /* doubleQuote */:\n            case 58 /* colon */:\n            case 44 /* comma */:\n                return false;\n        }\n        return true;\n    }\n    function scanNextNonTrivia() {\n        var result;\n        do {\n            result = scanNext();\n        } while (result >= 12 /* LineCommentTrivia */ && result <= 15 /* Trivia */);\n        return result;\n    }\n    return {\n        setPosition: setPosition,\n        getPosition: function () { return pos; },\n        scan: ignoreTrivia ? scanNextNonTrivia : scanNext,\n        getToken: function () { return token; },\n        getTokenValue: function () { return value; },\n        getTokenOffset: function () { return tokenOffset; },\n        getTokenLength: function () { return pos - tokenOffset; },\n        getTokenError: function () { return scanError; }\n    };\n}\nfunction isWhiteSpace(ch) {\n    return ch === 32 /* space */ || ch === 9 /* tab */ || ch === 11 /* verticalTab */ || ch === 12 /* formFeed */ ||\n        ch === 160 /* nonBreakingSpace */ || ch === 5760 /* ogham */ || ch >= 8192 /* enQuad */ && ch <= 8203 /* zeroWidthSpace */ ||\n        ch === 8239 /* narrowNoBreakSpace */ || ch === 8287 /* mathematicalSpace */ || ch === 12288 /* ideographicSpace */ || ch === 65279 /* byteOrderMark */;\n}\nfunction isLineBreak(ch) {\n    return ch === 10 /* lineFeed */ || ch === 13 /* carriageReturn */ || ch === 8232 /* lineSeparator */ || ch === 8233 /* paragraphSeparator */;\n}\nfunction isDigit(ch) {\n    return ch >= 48 /* _0 */ && ch <= 57 /* _9 */;\n}\n//# sourceMappingURL=scanner.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/monaco-editor/esm/vs/language/json/_deps/jsonc-parser/impl/scanner.js\n// module id = 746\n// module chunks = 2","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\nimport { createScanner } from './scanner.js';\nexport function format(documentText, range, options) {\n    var initialIndentLevel;\n    var formatText;\n    var formatTextStart;\n    var rangeStart;\n    var rangeEnd;\n    if (range) {\n        rangeStart = range.offset;\n        rangeEnd = rangeStart + range.length;\n        formatTextStart = rangeStart;\n        while (formatTextStart > 0 && !isEOL(documentText, formatTextStart - 1)) {\n            formatTextStart--;\n        }\n        var endOffset = rangeEnd;\n        while (endOffset < documentText.length && !isEOL(documentText, endOffset)) {\n            endOffset++;\n        }\n        formatText = documentText.substring(formatTextStart, endOffset);\n        initialIndentLevel = computeIndentLevel(formatText, 0, options);\n    }\n    else {\n        formatText = documentText;\n        initialIndentLevel = 0;\n        formatTextStart = 0;\n        rangeStart = 0;\n        rangeEnd = documentText.length;\n    }\n    var eol = getEOL(options, documentText);\n    var lineBreak = false;\n    var indentLevel = 0;\n    var indentValue;\n    if (options.insertSpaces) {\n        indentValue = repeat(' ', options.tabSize || 4);\n    }\n    else {\n        indentValue = '\\t';\n    }\n    var scanner = createScanner(formatText, false);\n    var hasError = false;\n    function newLineAndIndent() {\n        return eol + repeat(indentValue, initialIndentLevel + indentLevel);\n    }\n    function scanNext() {\n        var token = scanner.scan();\n        lineBreak = false;\n        while (token === 15 /* Trivia */ || token === 14 /* LineBreakTrivia */) {\n            lineBreak = lineBreak || (token === 14 /* LineBreakTrivia */);\n            token = scanner.scan();\n        }\n        hasError = token === 16 /* Unknown */ || scanner.getTokenError() !== 0 /* None */;\n        return token;\n    }\n    var editOperations = [];\n    function addEdit(text, startOffset, endOffset) {\n        if (!hasError && startOffset < rangeEnd && endOffset > rangeStart && documentText.substring(startOffset, endOffset) !== text) {\n            editOperations.push({ offset: startOffset, length: endOffset - startOffset, content: text });\n        }\n    }\n    var firstToken = scanNext();\n    if (firstToken !== 17 /* EOF */) {\n        var firstTokenStart = scanner.getTokenOffset() + formatTextStart;\n        var initialIndent = repeat(indentValue, initialIndentLevel);\n        addEdit(initialIndent, formatTextStart, firstTokenStart);\n    }\n    while (firstToken !== 17 /* EOF */) {\n        var firstTokenEnd = scanner.getTokenOffset() + scanner.getTokenLength() + formatTextStart;\n        var secondToken = scanNext();\n        var replaceContent = '';\n        while (!lineBreak && (secondToken === 12 /* LineCommentTrivia */ || secondToken === 13 /* BlockCommentTrivia */)) {\n            // comments on the same line: keep them on the same line, but ignore them otherwise\n            var commentTokenStart = scanner.getTokenOffset() + formatTextStart;\n            addEdit(' ', firstTokenEnd, commentTokenStart);\n            firstTokenEnd = scanner.getTokenOffset() + scanner.getTokenLength() + formatTextStart;\n            replaceContent = secondToken === 12 /* LineCommentTrivia */ ? newLineAndIndent() : '';\n            secondToken = scanNext();\n        }\n        if (secondToken === 2 /* CloseBraceToken */) {\n            if (firstToken !== 1 /* OpenBraceToken */) {\n                indentLevel--;\n                replaceContent = newLineAndIndent();\n            }\n        }\n        else if (secondToken === 4 /* CloseBracketToken */) {\n            if (firstToken !== 3 /* OpenBracketToken */) {\n                indentLevel--;\n                replaceContent = newLineAndIndent();\n            }\n        }\n        else {\n            switch (firstToken) {\n                case 3 /* OpenBracketToken */:\n                case 1 /* OpenBraceToken */:\n                    indentLevel++;\n                    replaceContent = newLineAndIndent();\n                    break;\n                case 5 /* CommaToken */:\n                case 12 /* LineCommentTrivia */:\n                    replaceContent = newLineAndIndent();\n                    break;\n                case 13 /* BlockCommentTrivia */:\n                    if (lineBreak) {\n                        replaceContent = newLineAndIndent();\n                    }\n                    else {\n                        // symbol following comment on the same line: keep on same line, separate with ' '\n                        replaceContent = ' ';\n                    }\n                    break;\n                case 6 /* ColonToken */:\n                    replaceContent = ' ';\n                    break;\n                case 10 /* StringLiteral */:\n                    if (secondToken === 6 /* ColonToken */) {\n                        replaceContent = '';\n                        break;\n                    }\n                // fall through\n                case 7 /* NullKeyword */:\n                case 8 /* TrueKeyword */:\n                case 9 /* FalseKeyword */:\n                case 11 /* NumericLiteral */:\n                case 2 /* CloseBraceToken */:\n                case 4 /* CloseBracketToken */:\n                    if (secondToken === 12 /* LineCommentTrivia */ || secondToken === 13 /* BlockCommentTrivia */) {\n                        replaceContent = ' ';\n                    }\n                    else if (secondToken !== 5 /* CommaToken */ && secondToken !== 17 /* EOF */) {\n                        hasError = true;\n                    }\n                    break;\n                case 16 /* Unknown */:\n                    hasError = true;\n                    break;\n            }\n            if (lineBreak && (secondToken === 12 /* LineCommentTrivia */ || secondToken === 13 /* BlockCommentTrivia */)) {\n                replaceContent = newLineAndIndent();\n            }\n        }\n        var secondTokenStart = scanner.getTokenOffset() + formatTextStart;\n        addEdit(replaceContent, firstTokenEnd, secondTokenStart);\n        firstToken = secondToken;\n    }\n    return editOperations;\n}\nfunction repeat(s, count) {\n    var result = '';\n    for (var i = 0; i < count; i++) {\n        result += s;\n    }\n    return result;\n}\nfunction computeIndentLevel(content, offset, options) {\n    var i = 0;\n    var nChars = 0;\n    var tabSize = options.tabSize || 4;\n    while (i < content.length) {\n        var ch = content.charAt(i);\n        if (ch === ' ') {\n            nChars++;\n        }\n        else if (ch === '\\t') {\n            nChars += tabSize;\n        }\n        else {\n            break;\n        }\n        i++;\n    }\n    return Math.floor(nChars / tabSize);\n}\nfunction getEOL(options, text) {\n    for (var i = 0; i < text.length; i++) {\n        var ch = text.charAt(i);\n        if (ch === '\\r') {\n            if (i + 1 < text.length && text.charAt(i + 1) === '\\n') {\n                return '\\r\\n';\n            }\n            return '\\r';\n        }\n        else if (ch === '\\n') {\n            return '\\n';\n        }\n    }\n    return (options && options.eol) || '\\n';\n}\nexport function isEOL(text, offset) {\n    return '\\r\\n'.indexOf(text.charAt(offset)) !== -1;\n}\n//# sourceMappingURL=format.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/monaco-editor/esm/vs/language/json/_deps/jsonc-parser/impl/format.js\n// module id = 788\n// module chunks = 2","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\nimport { createScanner } from './scanner.js';\n/**\n * For a given offset, evaluate the location in the JSON document. Each segment in the location path is either a property name or an array index.\n */\nexport function getLocation(text, position) {\n    var segments = []; // strings or numbers\n    var earlyReturnException = new Object();\n    var previousNode = void 0;\n    var previousNodeInst = {\n        value: {},\n        offset: 0,\n        length: 0,\n        type: 'object'\n    };\n    var isAtPropertyKey = false;\n    function setPreviousNode(value, offset, length, type) {\n        previousNodeInst.value = value;\n        previousNodeInst.offset = offset;\n        previousNodeInst.length = length;\n        previousNodeInst.type = type;\n        previousNodeInst.columnOffset = void 0;\n        previousNode = previousNodeInst;\n    }\n    try {\n        visit(text, {\n            onObjectBegin: function (offset, length) {\n                if (position <= offset) {\n                    throw earlyReturnException;\n                }\n                previousNode = void 0;\n                isAtPropertyKey = position > offset;\n                segments.push(''); // push a placeholder (will be replaced)\n            },\n            onObjectProperty: function (name, offset, length) {\n                if (position < offset) {\n                    throw earlyReturnException;\n                }\n                setPreviousNode(name, offset, length, 'property');\n                segments[segments.length - 1] = name;\n                if (position <= offset + length) {\n                    throw earlyReturnException;\n                }\n            },\n            onObjectEnd: function (offset, length) {\n                if (position <= offset) {\n                    throw earlyReturnException;\n                }\n                previousNode = void 0;\n                segments.pop();\n            },\n            onArrayBegin: function (offset, length) {\n                if (position <= offset) {\n                    throw earlyReturnException;\n                }\n                previousNode = void 0;\n                segments.push(0);\n            },\n            onArrayEnd: function (offset, length) {\n                if (position <= offset) {\n                    throw earlyReturnException;\n                }\n                previousNode = void 0;\n                segments.pop();\n            },\n            onLiteralValue: function (value, offset, length) {\n                if (position < offset) {\n                    throw earlyReturnException;\n                }\n                setPreviousNode(value, offset, length, getLiteralNodeType(value));\n                if (position <= offset + length) {\n                    throw earlyReturnException;\n                }\n            },\n            onSeparator: function (sep, offset, length) {\n                if (position <= offset) {\n                    throw earlyReturnException;\n                }\n                if (sep === ':' && previousNode && previousNode.type === 'property') {\n                    previousNode.columnOffset = offset;\n                    isAtPropertyKey = false;\n                    previousNode = void 0;\n                }\n                else if (sep === ',') {\n                    var last = segments[segments.length - 1];\n                    if (typeof last === 'number') {\n                        segments[segments.length - 1] = last + 1;\n                    }\n                    else {\n                        isAtPropertyKey = true;\n                        segments[segments.length - 1] = '';\n                    }\n                    previousNode = void 0;\n                }\n            }\n        });\n    }\n    catch (e) {\n        if (e !== earlyReturnException) {\n            throw e;\n        }\n    }\n    return {\n        path: segments,\n        previousNode: previousNode,\n        isAtPropertyKey: isAtPropertyKey,\n        matches: function (pattern) {\n            var k = 0;\n            for (var i = 0; k < pattern.length && i < segments.length; i++) {\n                if (pattern[k] === segments[i] || pattern[k] === '*') {\n                    k++;\n                }\n                else if (pattern[k] !== '**') {\n                    return false;\n                }\n            }\n            return k === pattern.length;\n        }\n    };\n}\n/**\n * Parses the given text and returns the object the JSON content represents. On invalid input, the parser tries to be as fault tolerant as possible, but still return a result.\n * Therefore always check the errors list to find out if the input was valid.\n */\nexport function parse(text, errors, options) {\n    if (errors === void 0) { errors = []; }\n    var currentProperty = null;\n    var currentParent = [];\n    var previousParents = [];\n    function onValue(value) {\n        if (Array.isArray(currentParent)) {\n            currentParent.push(value);\n        }\n        else if (currentProperty) {\n            currentParent[currentProperty] = value;\n        }\n    }\n    var visitor = {\n        onObjectBegin: function () {\n            var object = {};\n            onValue(object);\n            previousParents.push(currentParent);\n            currentParent = object;\n            currentProperty = null;\n        },\n        onObjectProperty: function (name) {\n            currentProperty = name;\n        },\n        onObjectEnd: function () {\n            currentParent = previousParents.pop();\n        },\n        onArrayBegin: function () {\n            var array = [];\n            onValue(array);\n            previousParents.push(currentParent);\n            currentParent = array;\n            currentProperty = null;\n        },\n        onArrayEnd: function () {\n            currentParent = previousParents.pop();\n        },\n        onLiteralValue: onValue,\n        onError: function (error, offset, length) {\n            errors.push({ error: error, offset: offset, length: length });\n        }\n    };\n    visit(text, visitor, options);\n    return currentParent[0];\n}\n/**\n * Parses the given text and returns a tree representation the JSON content. On invalid input, the parser tries to be as fault tolerant as possible, but still return a result.\n */\nexport function parseTree(text, errors, options) {\n    if (errors === void 0) { errors = []; }\n    var currentParent = { type: 'array', offset: -1, length: -1, children: [] }; // artificial root\n    function ensurePropertyComplete(endOffset) {\n        if (currentParent.type === 'property') {\n            currentParent.length = endOffset - currentParent.offset;\n            currentParent = currentParent.parent;\n        }\n    }\n    function onValue(valueNode) {\n        currentParent.children.push(valueNode);\n        return valueNode;\n    }\n    var visitor = {\n        onObjectBegin: function (offset) {\n            currentParent = onValue({ type: 'object', offset: offset, length: -1, parent: currentParent, children: [] });\n        },\n        onObjectProperty: function (name, offset, length) {\n            currentParent = onValue({ type: 'property', offset: offset, length: -1, parent: currentParent, children: [] });\n            currentParent.children.push({ type: 'string', value: name, offset: offset, length: length, parent: currentParent });\n        },\n        onObjectEnd: function (offset, length) {\n            currentParent.length = offset + length - currentParent.offset;\n            currentParent = currentParent.parent;\n            ensurePropertyComplete(offset + length);\n        },\n        onArrayBegin: function (offset, length) {\n            currentParent = onValue({ type: 'array', offset: offset, length: -1, parent: currentParent, children: [] });\n        },\n        onArrayEnd: function (offset, length) {\n            currentParent.length = offset + length - currentParent.offset;\n            currentParent = currentParent.parent;\n            ensurePropertyComplete(offset + length);\n        },\n        onLiteralValue: function (value, offset, length) {\n            onValue({ type: getLiteralNodeType(value), offset: offset, length: length, parent: currentParent, value: value });\n            ensurePropertyComplete(offset + length);\n        },\n        onSeparator: function (sep, offset, length) {\n            if (currentParent.type === 'property') {\n                if (sep === ':') {\n                    currentParent.columnOffset = offset;\n                }\n                else if (sep === ',') {\n                    ensurePropertyComplete(offset);\n                }\n            }\n        },\n        onError: function (error, offset, length) {\n            errors.push({ error: error, offset: offset, length: length });\n        }\n    };\n    visit(text, visitor, options);\n    var result = currentParent.children[0];\n    if (result) {\n        delete result.parent;\n    }\n    return result;\n}\n/**\n * Finds the node at the given path in a JSON DOM.\n */\nexport function findNodeAtLocation(root, path) {\n    if (!root) {\n        return void 0;\n    }\n    var node = root;\n    for (var _i = 0, path_1 = path; _i < path_1.length; _i++) {\n        var segment = path_1[_i];\n        if (typeof segment === 'string') {\n            if (node.type !== 'object' || !Array.isArray(node.children)) {\n                return void 0;\n            }\n            var found = false;\n            for (var _a = 0, _b = node.children; _a < _b.length; _a++) {\n                var propertyNode = _b[_a];\n                if (Array.isArray(propertyNode.children) && propertyNode.children[0].value === segment) {\n                    node = propertyNode.children[1];\n                    found = true;\n                    break;\n                }\n            }\n            if (!found) {\n                return void 0;\n            }\n        }\n        else {\n            var index = segment;\n            if (node.type !== 'array' || index < 0 || !Array.isArray(node.children) || index >= node.children.length) {\n                return void 0;\n            }\n            node = node.children[index];\n        }\n    }\n    return node;\n}\n/**\n * Evaluates the JavaScript object of the given JSON DOM node\n */\nexport function getNodeValue(node) {\n    if (node.type === 'array') {\n        return node.children.map(getNodeValue);\n    }\n    else if (node.type === 'object') {\n        var obj = Object.create(null);\n        for (var _i = 0, _a = node.children; _i < _a.length; _i++) {\n            var prop = _a[_i];\n            obj[prop.children[0].value] = getNodeValue(prop.children[1]);\n        }\n        return obj;\n    }\n    return node.value;\n}\n/**\n * Parses the given text and invokes the visitor functions for each object, array and literal reached.\n */\nexport function visit(text, visitor, options) {\n    var _scanner = createScanner(text, false);\n    function toNoArgVisit(visitFunction) {\n        return visitFunction ? function () { return visitFunction(_scanner.getTokenOffset(), _scanner.getTokenLength()); } : function () { return true; };\n    }\n    function toOneArgVisit(visitFunction) {\n        return visitFunction ? function (arg) { return visitFunction(arg, _scanner.getTokenOffset(), _scanner.getTokenLength()); } : function () { return true; };\n    }\n    var onObjectBegin = toNoArgVisit(visitor.onObjectBegin), onObjectProperty = toOneArgVisit(visitor.onObjectProperty), onObjectEnd = toNoArgVisit(visitor.onObjectEnd), onArrayBegin = toNoArgVisit(visitor.onArrayBegin), onArrayEnd = toNoArgVisit(visitor.onArrayEnd), onLiteralValue = toOneArgVisit(visitor.onLiteralValue), onSeparator = toOneArgVisit(visitor.onSeparator), onComment = toNoArgVisit(visitor.onComment), onError = toOneArgVisit(visitor.onError);\n    var disallowComments = options && options.disallowComments;\n    var allowTrailingComma = options && options.allowTrailingComma;\n    function scanNext() {\n        while (true) {\n            var token = _scanner.scan();\n            switch (_scanner.getTokenError()) {\n                case 4 /* InvalidUnicode */:\n                    handleError(14 /* InvalidUnicode */);\n                    break;\n                case 5 /* InvalidEscapeCharacter */:\n                    handleError(15 /* InvalidEscapeCharacter */);\n                    break;\n                case 3 /* UnexpectedEndOfNumber */:\n                    handleError(13 /* UnexpectedEndOfNumber */);\n                    break;\n                case 1 /* UnexpectedEndOfComment */:\n                    if (!disallowComments) {\n                        handleError(11 /* UnexpectedEndOfComment */);\n                    }\n                    break;\n                case 2 /* UnexpectedEndOfString */:\n                    handleError(12 /* UnexpectedEndOfString */);\n                    break;\n                case 6 /* InvalidCharacter */:\n                    handleError(16 /* InvalidCharacter */);\n                    break;\n            }\n            switch (token) {\n                case 12 /* LineCommentTrivia */:\n                case 13 /* BlockCommentTrivia */:\n                    if (disallowComments) {\n                        handleError(10 /* InvalidCommentToken */);\n                    }\n                    else {\n                        onComment();\n                    }\n                    break;\n                case 16 /* Unknown */:\n                    handleError(1 /* InvalidSymbol */);\n                    break;\n                case 15 /* Trivia */:\n                case 14 /* LineBreakTrivia */:\n                    break;\n                default:\n                    return token;\n            }\n        }\n    }\n    function handleError(error, skipUntilAfter, skipUntil) {\n        if (skipUntilAfter === void 0) { skipUntilAfter = []; }\n        if (skipUntil === void 0) { skipUntil = []; }\n        onError(error);\n        if (skipUntilAfter.length + skipUntil.length > 0) {\n            var token = _scanner.getToken();\n            while (token !== 17 /* EOF */) {\n                if (skipUntilAfter.indexOf(token) !== -1) {\n                    scanNext();\n                    break;\n                }\n                else if (skipUntil.indexOf(token) !== -1) {\n                    break;\n                }\n                token = scanNext();\n            }\n        }\n    }\n    function parseString(isValue) {\n        var value = _scanner.getTokenValue();\n        if (isValue) {\n            onLiteralValue(value);\n        }\n        else {\n            onObjectProperty(value);\n        }\n        scanNext();\n        return true;\n    }\n    function parseLiteral() {\n        switch (_scanner.getToken()) {\n            case 11 /* NumericLiteral */:\n                var value = 0;\n                try {\n                    value = JSON.parse(_scanner.getTokenValue());\n                    if (typeof value !== 'number') {\n                        handleError(2 /* InvalidNumberFormat */);\n                        value = 0;\n                    }\n                }\n                catch (e) {\n                    handleError(2 /* InvalidNumberFormat */);\n                }\n                onLiteralValue(value);\n                break;\n            case 7 /* NullKeyword */:\n                onLiteralValue(null);\n                break;\n            case 8 /* TrueKeyword */:\n                onLiteralValue(true);\n                break;\n            case 9 /* FalseKeyword */:\n                onLiteralValue(false);\n                break;\n            default:\n                return false;\n        }\n        scanNext();\n        return true;\n    }\n    function parseProperty() {\n        if (_scanner.getToken() !== 10 /* StringLiteral */) {\n            handleError(3 /* PropertyNameExpected */, [], [2 /* CloseBraceToken */, 5 /* CommaToken */]);\n            return false;\n        }\n        parseString(false);\n        if (_scanner.getToken() === 6 /* ColonToken */) {\n            onSeparator(':');\n            scanNext(); // consume colon\n            if (!parseValue()) {\n                handleError(4 /* ValueExpected */, [], [2 /* CloseBraceToken */, 5 /* CommaToken */]);\n            }\n        }\n        else {\n            handleError(5 /* ColonExpected */, [], [2 /* CloseBraceToken */, 5 /* CommaToken */]);\n        }\n        return true;\n    }\n    function parseObject() {\n        onObjectBegin();\n        scanNext(); // consume open brace\n        var needsComma = false;\n        while (_scanner.getToken() !== 2 /* CloseBraceToken */ && _scanner.getToken() !== 17 /* EOF */) {\n            if (_scanner.getToken() === 5 /* CommaToken */) {\n                if (!needsComma) {\n                    handleError(4 /* ValueExpected */, [], []);\n                }\n                onSeparator(',');\n                scanNext(); // consume comma\n                if (_scanner.getToken() === 2 /* CloseBraceToken */ && allowTrailingComma) {\n                    break;\n                }\n            }\n            else if (needsComma) {\n                handleError(6 /* CommaExpected */, [], []);\n            }\n            if (!parseProperty()) {\n                handleError(4 /* ValueExpected */, [], [2 /* CloseBraceToken */, 5 /* CommaToken */]);\n            }\n            needsComma = true;\n        }\n        onObjectEnd();\n        if (_scanner.getToken() !== 2 /* CloseBraceToken */) {\n            handleError(7 /* CloseBraceExpected */, [2 /* CloseBraceToken */], []);\n        }\n        else {\n            scanNext(); // consume close brace\n        }\n        return true;\n    }\n    function parseArray() {\n        onArrayBegin();\n        scanNext(); // consume open bracket\n        var needsComma = false;\n        while (_scanner.getToken() !== 4 /* CloseBracketToken */ && _scanner.getToken() !== 17 /* EOF */) {\n            if (_scanner.getToken() === 5 /* CommaToken */) {\n                if (!needsComma) {\n                    handleError(4 /* ValueExpected */, [], []);\n                }\n                onSeparator(',');\n                scanNext(); // consume comma\n                if (_scanner.getToken() === 4 /* CloseBracketToken */ && allowTrailingComma) {\n                    break;\n                }\n            }\n            else if (needsComma) {\n                handleError(6 /* CommaExpected */, [], []);\n            }\n            if (!parseValue()) {\n                handleError(4 /* ValueExpected */, [], [4 /* CloseBracketToken */, 5 /* CommaToken */]);\n            }\n            needsComma = true;\n        }\n        onArrayEnd();\n        if (_scanner.getToken() !== 4 /* CloseBracketToken */) {\n            handleError(8 /* CloseBracketExpected */, [4 /* CloseBracketToken */], []);\n        }\n        else {\n            scanNext(); // consume close bracket\n        }\n        return true;\n    }\n    function parseValue() {\n        switch (_scanner.getToken()) {\n            case 3 /* OpenBracketToken */:\n                return parseArray();\n            case 1 /* OpenBraceToken */:\n                return parseObject();\n            case 10 /* StringLiteral */:\n                return parseString(true);\n            default:\n                return parseLiteral();\n        }\n    }\n    scanNext();\n    if (_scanner.getToken() === 17 /* EOF */) {\n        return true;\n    }\n    if (!parseValue()) {\n        handleError(4 /* ValueExpected */, [], []);\n        return false;\n    }\n    if (_scanner.getToken() !== 17 /* EOF */) {\n        handleError(9 /* EndOfFileExpected */, [], []);\n    }\n    return true;\n}\n/**\n * Takes JSON with JavaScript-style comments and remove\n * them. Optionally replaces every none-newline character\n * of comments with a replaceCharacter\n */\nexport function stripComments(text, replaceCh) {\n    var _scanner = createScanner(text), parts = [], kind, offset = 0, pos;\n    do {\n        pos = _scanner.getPosition();\n        kind = _scanner.scan();\n        switch (kind) {\n            case 12 /* LineCommentTrivia */:\n            case 13 /* BlockCommentTrivia */:\n            case 17 /* EOF */:\n                if (offset !== pos) {\n                    parts.push(text.substring(offset, pos));\n                }\n                if (replaceCh !== void 0) {\n                    parts.push(_scanner.getTokenValue().replace(/[^\\r\\n]/g, replaceCh));\n                }\n                offset = _scanner.getPosition();\n                break;\n        }\n    } while (kind !== 17 /* EOF */);\n    return parts.join('');\n}\nfunction getLiteralNodeType(value) {\n    switch (typeof value) {\n        case 'boolean': return 'boolean';\n        case 'number': return 'number';\n        case 'string': return 'string';\n        default: return 'null';\n    }\n}\n//# sourceMappingURL=parser.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/monaco-editor/esm/vs/language/json/_deps/jsonc-parser/impl/parser.js\n// module id = 789\n// module chunks = 2","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\nvar Promise = monaco.Promise;\nvar STOP_WHEN_IDLE_FOR = 2 * 60 * 1000; // 2min\nvar WorkerManager = /** @class */ (function () {\n    function WorkerManager(defaults) {\n        var _this = this;\n        this._defaults = defaults;\n        this._worker = null;\n        this._idleCheckInterval = setInterval(function () { return _this._checkIfIdle(); }, 30 * 1000);\n        this._lastUsedTime = 0;\n        this._configChangeListener = this._defaults.onDidChange(function () { return _this._stopWorker(); });\n    }\n    WorkerManager.prototype._stopWorker = function () {\n        if (this._worker) {\n            this._worker.dispose();\n            this._worker = null;\n        }\n        this._client = null;\n    };\n    WorkerManager.prototype.dispose = function () {\n        clearInterval(this._idleCheckInterval);\n        this._configChangeListener.dispose();\n        this._stopWorker();\n    };\n    WorkerManager.prototype._checkIfIdle = function () {\n        if (!this._worker) {\n            return;\n        }\n        var timePassedSinceLastUsed = Date.now() - this._lastUsedTime;\n        if (timePassedSinceLastUsed > STOP_WHEN_IDLE_FOR) {\n            this._stopWorker();\n        }\n    };\n    WorkerManager.prototype._getClient = function () {\n        this._lastUsedTime = Date.now();\n        if (!this._client) {\n            this._worker = monaco.editor.createWebWorker({\n                // module that exports the create() method and returns a `JSONWorker` instance\n                moduleId: 'vs/language/json/jsonWorker',\n                label: this._defaults.languageId,\n                // passed in to the create() method\n                createData: {\n                    languageSettings: this._defaults.diagnosticsOptions,\n                    languageId: this._defaults.languageId\n                }\n            });\n            this._client = this._worker.getProxy();\n        }\n        return this._client;\n    };\n    WorkerManager.prototype.getLanguageServiceWorker = function () {\n        var _this = this;\n        var resources = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            resources[_i] = arguments[_i];\n        }\n        var _client;\n        return toShallowCancelPromise(this._getClient().then(function (client) {\n            _client = client;\n        }).then(function (_) {\n            return _this._worker.withSyncedResources(resources);\n        }).then(function (_) { return _client; }));\n    };\n    return WorkerManager;\n}());\nexport { WorkerManager };\nfunction toShallowCancelPromise(p) {\n    var completeCallback;\n    var errorCallback;\n    var r = new Promise(function (c, e) {\n        completeCallback = c;\n        errorCallback = e;\n    }, function () { });\n    p.then(completeCallback, errorCallback);\n    return r;\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/monaco-editor/esm/vs/language/json/workerManager.js\n// module id = 893\n// module chunks = 2","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\nimport * as ls from './_deps/vscode-languageserver-types/main.js';\nvar Uri = monaco.Uri;\nvar Range = monaco.Range;\n// --- diagnostics --- ---\nvar DiagnostcsAdapter = /** @class */ (function () {\n    function DiagnostcsAdapter(_languageId, _worker) {\n        var _this = this;\n        this._languageId = _languageId;\n        this._worker = _worker;\n        this._disposables = [];\n        this._listener = Object.create(null);\n        var onModelAdd = function (model) {\n            var modeId = model.getModeId();\n            if (modeId !== _this._languageId) {\n                return;\n            }\n            var handle;\n            _this._listener[model.uri.toString()] = model.onDidChangeContent(function () {\n                clearTimeout(handle);\n                handle = setTimeout(function () { return _this._doValidate(model.uri, modeId); }, 500);\n            });\n            _this._doValidate(model.uri, modeId);\n        };\n        var onModelRemoved = function (model) {\n            monaco.editor.setModelMarkers(model, _this._languageId, []);\n            var uriStr = model.uri.toString();\n            var listener = _this._listener[uriStr];\n            if (listener) {\n                listener.dispose();\n                delete _this._listener[uriStr];\n            }\n        };\n        this._disposables.push(monaco.editor.onDidCreateModel(onModelAdd));\n        this._disposables.push(monaco.editor.onWillDisposeModel(function (model) {\n            onModelRemoved(model);\n            _this._resetSchema(model.uri);\n        }));\n        this._disposables.push(monaco.editor.onDidChangeModelLanguage(function (event) {\n            onModelRemoved(event.model);\n            onModelAdd(event.model);\n            _this._resetSchema(event.model.uri);\n        }));\n        this._disposables.push({\n            dispose: function () {\n                for (var key in _this._listener) {\n                    _this._listener[key].dispose();\n                }\n            }\n        });\n        monaco.editor.getModels().forEach(onModelAdd);\n    }\n    DiagnostcsAdapter.prototype.dispose = function () {\n        this._disposables.forEach(function (d) { return d && d.dispose(); });\n        this._disposables = [];\n    };\n    DiagnostcsAdapter.prototype._resetSchema = function (resource) {\n        this._worker().then(function (worker) {\n            worker.resetSchema(resource.toString());\n        });\n    };\n    DiagnostcsAdapter.prototype._doValidate = function (resource, languageId) {\n        this._worker(resource).then(function (worker) {\n            return worker.doValidation(resource.toString()).then(function (diagnostics) {\n                var markers = diagnostics.map(function (d) { return toDiagnostics(resource, d); });\n                var model = monaco.editor.getModel(resource);\n                if (model.getModeId() === languageId) {\n                    monaco.editor.setModelMarkers(model, languageId, markers);\n                }\n            });\n        }).then(undefined, function (err) {\n            console.error(err);\n        });\n    };\n    return DiagnostcsAdapter;\n}());\nexport { DiagnostcsAdapter };\nfunction toSeverity(lsSeverity) {\n    switch (lsSeverity) {\n        case ls.DiagnosticSeverity.Error: return monaco.MarkerSeverity.Error;\n        case ls.DiagnosticSeverity.Warning: return monaco.MarkerSeverity.Warning;\n        case ls.DiagnosticSeverity.Information: return monaco.MarkerSeverity.Info;\n        case ls.DiagnosticSeverity.Hint: return monaco.MarkerSeverity.Hint;\n        default:\n            return monaco.MarkerSeverity.Info;\n    }\n}\nfunction toDiagnostics(resource, diag) {\n    var code = typeof diag.code === 'number' ? String(diag.code) : diag.code;\n    return {\n        severity: toSeverity(diag.severity),\n        startLineNumber: diag.range.start.line + 1,\n        startColumn: diag.range.start.character + 1,\n        endLineNumber: diag.range.end.line + 1,\n        endColumn: diag.range.end.character + 1,\n        message: diag.message,\n        code: code,\n        source: diag.source\n    };\n}\n// --- completion ------\nfunction fromPosition(position) {\n    if (!position) {\n        return void 0;\n    }\n    return { character: position.column - 1, line: position.lineNumber - 1 };\n}\nfunction fromRange(range) {\n    if (!range) {\n        return void 0;\n    }\n    return { start: fromPosition(range.getStartPosition()), end: fromPosition(range.getEndPosition()) };\n}\nfunction toRange(range) {\n    if (!range) {\n        return void 0;\n    }\n    return new Range(range.start.line + 1, range.start.character + 1, range.end.line + 1, range.end.character + 1);\n}\nfunction toCompletionItemKind(kind) {\n    var mItemKind = monaco.languages.CompletionItemKind;\n    switch (kind) {\n        case ls.CompletionItemKind.Text: return mItemKind.Text;\n        case ls.CompletionItemKind.Method: return mItemKind.Method;\n        case ls.CompletionItemKind.Function: return mItemKind.Function;\n        case ls.CompletionItemKind.Constructor: return mItemKind.Constructor;\n        case ls.CompletionItemKind.Field: return mItemKind.Field;\n        case ls.CompletionItemKind.Variable: return mItemKind.Variable;\n        case ls.CompletionItemKind.Class: return mItemKind.Class;\n        case ls.CompletionItemKind.Interface: return mItemKind.Interface;\n        case ls.CompletionItemKind.Module: return mItemKind.Module;\n        case ls.CompletionItemKind.Property: return mItemKind.Property;\n        case ls.CompletionItemKind.Unit: return mItemKind.Unit;\n        case ls.CompletionItemKind.Value: return mItemKind.Value;\n        case ls.CompletionItemKind.Enum: return mItemKind.Enum;\n        case ls.CompletionItemKind.Keyword: return mItemKind.Keyword;\n        case ls.CompletionItemKind.Snippet: return mItemKind.Snippet;\n        case ls.CompletionItemKind.Color: return mItemKind.Color;\n        case ls.CompletionItemKind.File: return mItemKind.File;\n        case ls.CompletionItemKind.Reference: return mItemKind.Reference;\n    }\n    return mItemKind.Property;\n}\nfunction fromCompletionItemKind(kind) {\n    var mItemKind = monaco.languages.CompletionItemKind;\n    switch (kind) {\n        case mItemKind.Text: return ls.CompletionItemKind.Text;\n        case mItemKind.Method: return ls.CompletionItemKind.Method;\n        case mItemKind.Function: return ls.CompletionItemKind.Function;\n        case mItemKind.Constructor: return ls.CompletionItemKind.Constructor;\n        case mItemKind.Field: return ls.CompletionItemKind.Field;\n        case mItemKind.Variable: return ls.CompletionItemKind.Variable;\n        case mItemKind.Class: return ls.CompletionItemKind.Class;\n        case mItemKind.Interface: return ls.CompletionItemKind.Interface;\n        case mItemKind.Module: return ls.CompletionItemKind.Module;\n        case mItemKind.Property: return ls.CompletionItemKind.Property;\n        case mItemKind.Unit: return ls.CompletionItemKind.Unit;\n        case mItemKind.Value: return ls.CompletionItemKind.Value;\n        case mItemKind.Enum: return ls.CompletionItemKind.Enum;\n        case mItemKind.Keyword: return ls.CompletionItemKind.Keyword;\n        case mItemKind.Snippet: return ls.CompletionItemKind.Snippet;\n        case mItemKind.Color: return ls.CompletionItemKind.Color;\n        case mItemKind.File: return ls.CompletionItemKind.File;\n        case mItemKind.Reference: return ls.CompletionItemKind.Reference;\n    }\n    return ls.CompletionItemKind.Property;\n}\nfunction toTextEdit(textEdit) {\n    if (!textEdit) {\n        return void 0;\n    }\n    return {\n        range: toRange(textEdit.range),\n        text: textEdit.newText\n    };\n}\nfunction toCompletionItem(entry) {\n    return {\n        label: entry.label,\n        insertText: entry.insertText,\n        sortText: entry.sortText,\n        filterText: entry.filterText,\n        documentation: entry.documentation,\n        detail: entry.detail,\n        kind: toCompletionItemKind(entry.kind),\n        textEdit: toTextEdit(entry.textEdit),\n        data: entry.data\n    };\n}\nfunction fromMarkdownString(entry) {\n    return {\n        kind: (typeof entry === 'string' ? ls.MarkupKind.PlainText : ls.MarkupKind.Markdown),\n        value: (typeof entry === 'string' ? entry : entry.value)\n    };\n}\nfunction fromCompletionItem(entry) {\n    var item = {\n        label: entry.label,\n        sortText: entry.sortText,\n        filterText: entry.filterText,\n        documentation: fromMarkdownString(entry.documentation),\n        detail: entry.detail,\n        kind: fromCompletionItemKind(entry.kind),\n        data: entry.data\n    };\n    if (typeof entry.insertText === 'object' && typeof entry.insertText.value === 'string') {\n        item.insertText = entry.insertText.value;\n        item.insertTextFormat = ls.InsertTextFormat.Snippet;\n    }\n    else {\n        item.insertText = entry.insertText;\n    }\n    if (entry.range) {\n        item.textEdit = ls.TextEdit.replace(fromRange(entry.range), item.insertText);\n    }\n    return item;\n}\nvar CompletionAdapter = /** @class */ (function () {\n    function CompletionAdapter(_worker) {\n        this._worker = _worker;\n    }\n    Object.defineProperty(CompletionAdapter.prototype, \"triggerCharacters\", {\n        get: function () {\n            return [' ', ':'];\n        },\n        enumerable: true,\n        configurable: true\n    });\n    CompletionAdapter.prototype.provideCompletionItems = function (model, position, token) {\n        var wordInfo = model.getWordUntilPosition(position);\n        var resource = model.uri;\n        return wireCancellationToken(token, this._worker(resource).then(function (worker) {\n            return worker.doComplete(resource.toString(), fromPosition(position));\n        }).then(function (info) {\n            if (!info) {\n                return;\n            }\n            var items = info.items.map(function (entry) {\n                var item = {\n                    label: entry.label,\n                    insertText: entry.insertText,\n                    sortText: entry.sortText,\n                    filterText: entry.filterText,\n                    documentation: entry.documentation,\n                    detail: entry.detail,\n                    kind: toCompletionItemKind(entry.kind),\n                };\n                if (entry.textEdit) {\n                    item.range = toRange(entry.textEdit.range);\n                    item.insertText = entry.textEdit.newText;\n                }\n                if (entry.insertTextFormat === ls.InsertTextFormat.Snippet) {\n                    item.insertText = { value: item.insertText };\n                }\n                return item;\n            });\n            return {\n                isIncomplete: info.isIncomplete,\n                items: items\n            };\n        }));\n    };\n    return CompletionAdapter;\n}());\nexport { CompletionAdapter };\nfunction isMarkupContent(thing) {\n    return thing && typeof thing === 'object' && typeof thing.kind === 'string';\n}\nfunction toMarkdownString(entry) {\n    if (typeof entry === 'string') {\n        return {\n            value: entry\n        };\n    }\n    if (isMarkupContent(entry)) {\n        if (entry.kind === 'plaintext') {\n            return {\n                value: entry.value.replace(/[\\\\`*_{}[\\]()#+\\-.!]/g, '\\\\$&')\n            };\n        }\n        return {\n            value: entry.value\n        };\n    }\n    return { value: '```' + entry.language + '\\n' + entry.value + '\\n```\\n' };\n}\nfunction toMarkedStringArray(contents) {\n    if (!contents) {\n        return void 0;\n    }\n    if (Array.isArray(contents)) {\n        return contents.map(toMarkdownString);\n    }\n    return [toMarkdownString(contents)];\n}\n// --- hover ------\nvar HoverAdapter = /** @class */ (function () {\n    function HoverAdapter(_worker) {\n        this._worker = _worker;\n    }\n    HoverAdapter.prototype.provideHover = function (model, position, token) {\n        var resource = model.uri;\n        return wireCancellationToken(token, this._worker(resource).then(function (worker) {\n            return worker.doHover(resource.toString(), fromPosition(position));\n        }).then(function (info) {\n            if (!info) {\n                return;\n            }\n            return {\n                range: toRange(info.range),\n                contents: toMarkedStringArray(info.contents)\n            };\n        }));\n    };\n    return HoverAdapter;\n}());\nexport { HoverAdapter };\n// --- definition ------\nfunction toLocation(location) {\n    return {\n        uri: Uri.parse(location.uri),\n        range: toRange(location.range)\n    };\n}\n// --- document symbols ------\nfunction toSymbolKind(kind) {\n    var mKind = monaco.languages.SymbolKind;\n    switch (kind) {\n        case ls.SymbolKind.File: return mKind.Array;\n        case ls.SymbolKind.Module: return mKind.Module;\n        case ls.SymbolKind.Namespace: return mKind.Namespace;\n        case ls.SymbolKind.Package: return mKind.Package;\n        case ls.SymbolKind.Class: return mKind.Class;\n        case ls.SymbolKind.Method: return mKind.Method;\n        case ls.SymbolKind.Property: return mKind.Property;\n        case ls.SymbolKind.Field: return mKind.Field;\n        case ls.SymbolKind.Constructor: return mKind.Constructor;\n        case ls.SymbolKind.Enum: return mKind.Enum;\n        case ls.SymbolKind.Interface: return mKind.Interface;\n        case ls.SymbolKind.Function: return mKind.Function;\n        case ls.SymbolKind.Variable: return mKind.Variable;\n        case ls.SymbolKind.Constant: return mKind.Constant;\n        case ls.SymbolKind.String: return mKind.String;\n        case ls.SymbolKind.Number: return mKind.Number;\n        case ls.SymbolKind.Boolean: return mKind.Boolean;\n        case ls.SymbolKind.Array: return mKind.Array;\n    }\n    return mKind.Function;\n}\nvar DocumentSymbolAdapter = /** @class */ (function () {\n    function DocumentSymbolAdapter(_worker) {\n        this._worker = _worker;\n    }\n    DocumentSymbolAdapter.prototype.provideDocumentSymbols = function (model, token) {\n        var resource = model.uri;\n        return wireCancellationToken(token, this._worker(resource).then(function (worker) { return worker.findDocumentSymbols(resource.toString()); }).then(function (items) {\n            if (!items) {\n                return;\n            }\n            return items.map(function (item) { return ({\n                name: item.name,\n                containerName: item.containerName,\n                kind: toSymbolKind(item.kind),\n                location: toLocation(item.location)\n            }); });\n        }));\n    };\n    return DocumentSymbolAdapter;\n}());\nexport { DocumentSymbolAdapter };\nfunction fromFormattingOptions(options) {\n    return {\n        tabSize: options.tabSize,\n        insertSpaces: options.insertSpaces\n    };\n}\nvar DocumentFormattingEditProvider = /** @class */ (function () {\n    function DocumentFormattingEditProvider(_worker) {\n        this._worker = _worker;\n    }\n    DocumentFormattingEditProvider.prototype.provideDocumentFormattingEdits = function (model, options, token) {\n        var resource = model.uri;\n        return wireCancellationToken(token, this._worker(resource).then(function (worker) {\n            return worker.format(resource.toString(), null, fromFormattingOptions(options)).then(function (edits) {\n                if (!edits || edits.length === 0) {\n                    return;\n                }\n                return edits.map(toTextEdit);\n            });\n        }));\n    };\n    return DocumentFormattingEditProvider;\n}());\nexport { DocumentFormattingEditProvider };\nvar DocumentRangeFormattingEditProvider = /** @class */ (function () {\n    function DocumentRangeFormattingEditProvider(_worker) {\n        this._worker = _worker;\n    }\n    DocumentRangeFormattingEditProvider.prototype.provideDocumentRangeFormattingEdits = function (model, range, options, token) {\n        var resource = model.uri;\n        return wireCancellationToken(token, this._worker(resource).then(function (worker) {\n            return worker.format(resource.toString(), fromRange(range), fromFormattingOptions(options)).then(function (edits) {\n                if (!edits || edits.length === 0) {\n                    return;\n                }\n                return edits.map(toTextEdit);\n            });\n        }));\n    };\n    return DocumentRangeFormattingEditProvider;\n}());\nexport { DocumentRangeFormattingEditProvider };\n/**\n * Hook a cancellation token to a WinJS Promise\n */\nfunction wireCancellationToken(token, promise) {\n    if (promise.cancel) {\n        token.onCancellationRequested(function () { return promise.cancel(); });\n    }\n    return promise;\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/monaco-editor/esm/vs/language/json/languageFeatures.js\n// module id = 894\n// module chunks = 2","/* --------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * ------------------------------------------------------------------------------------------ */\n'use strict';\n/**\n * The Position namespace provides helper functions to work with\n * [Position](#Position) literals.\n */\nexport var Position;\n(function (Position) {\n    /**\n     * Creates a new Position literal from the given line and character.\n     * @param line The position's line.\n     * @param character The position's character.\n     */\n    function create(line, character) {\n        return { line: line, character: character };\n    }\n    Position.create = create;\n    /**\n     * Checks whether the given liternal conforms to the [Position](#Position) interface.\n     */\n    function is(value) {\n        var candidate = value;\n        return Is.defined(candidate) && Is.number(candidate.line) && Is.number(candidate.character);\n    }\n    Position.is = is;\n})(Position || (Position = {}));\n/**\n * The Range namespace provides helper functions to work with\n * [Range](#Range) literals.\n */\nexport var Range;\n(function (Range) {\n    function create(one, two, three, four) {\n        if (Is.number(one) && Is.number(two) && Is.number(three) && Is.number(four)) {\n            return { start: Position.create(one, two), end: Position.create(three, four) };\n        }\n        else if (Position.is(one) && Position.is(two)) {\n            return { start: one, end: two };\n        }\n        else {\n            throw new Error(\"Range#create called with invalid arguments[\" + one + \", \" + two + \", \" + three + \", \" + four + \"]\");\n        }\n    }\n    Range.create = create;\n    /**\n     * Checks whether the given literal conforms to the [Range](#Range) interface.\n     */\n    function is(value) {\n        var candidate = value;\n        return Is.defined(candidate) && Position.is(candidate.start) && Position.is(candidate.end);\n    }\n    Range.is = is;\n})(Range || (Range = {}));\n/**\n * The Location namespace provides helper functions to work with\n * [Location](#Location) literals.\n */\nexport var Location;\n(function (Location) {\n    /**\n     * Creates a Location literal.\n     * @param uri The location's uri.\n     * @param range The location's range.\n     */\n    function create(uri, range) {\n        return { uri: uri, range: range };\n    }\n    Location.create = create;\n    /**\n     * Checks whether the given literal conforms to the [Location](#Location) interface.\n     */\n    function is(value) {\n        var candidate = value;\n        return Is.defined(candidate) && Range.is(candidate.range) && (Is.string(candidate.uri) || Is.undefined(candidate.uri));\n    }\n    Location.is = is;\n})(Location || (Location = {}));\n/**\n * The diagnostic's serverity.\n */\nexport var DiagnosticSeverity;\n(function (DiagnosticSeverity) {\n    /**\n     * Reports an error.\n     */\n    DiagnosticSeverity.Error = 1;\n    /**\n     * Reports a warning.\n     */\n    DiagnosticSeverity.Warning = 2;\n    /**\n     * Reports an information.\n     */\n    DiagnosticSeverity.Information = 3;\n    /**\n     * Reports a hint.\n     */\n    DiagnosticSeverity.Hint = 4;\n})(DiagnosticSeverity || (DiagnosticSeverity = {}));\n/**\n * The Diagnostic namespace provides helper functions to work with\n * [Diagnostic](#Diagnostic) literals.\n */\nexport var Diagnostic;\n(function (Diagnostic) {\n    /**\n     * Creates a new Diagnostic literal.\n     */\n    function create(range, message, severity, code, source) {\n        var result = { range: range, message: message };\n        if (Is.defined(severity)) {\n            result.severity = severity;\n        }\n        if (Is.defined(code)) {\n            result.code = code;\n        }\n        if (Is.defined(source)) {\n            result.source = source;\n        }\n        return result;\n    }\n    Diagnostic.create = create;\n    /**\n     * Checks whether the given literal conforms to the [Diagnostic](#Diagnostic) interface.\n     */\n    function is(value) {\n        var candidate = value;\n        return Is.defined(candidate)\n            && Range.is(candidate.range)\n            && Is.string(candidate.message)\n            && (Is.number(candidate.severity) || Is.undefined(candidate.severity))\n            && (Is.number(candidate.code) || Is.string(candidate.code) || Is.undefined(candidate.code))\n            && (Is.string(candidate.source) || Is.undefined(candidate.source));\n    }\n    Diagnostic.is = is;\n})(Diagnostic || (Diagnostic = {}));\n/**\n * The Command namespace provides helper functions to work with\n * [Command](#Command) literals.\n */\nexport var Command;\n(function (Command) {\n    /**\n     * Creates a new Command literal.\n     */\n    function create(title, command) {\n        var args = [];\n        for (var _i = 2; _i < arguments.length; _i++) {\n            args[_i - 2] = arguments[_i];\n        }\n        var result = { title: title, command: command };\n        if (Is.defined(args) && args.length > 0) {\n            result.arguments = args;\n        }\n        return result;\n    }\n    Command.create = create;\n    /**\n     * Checks whether the given literal conforms to the [Command](#Command) interface.\n     */\n    function is(value) {\n        var candidate = value;\n        return Is.defined(candidate) && Is.string(candidate.title) && Is.string(candidate.title);\n    }\n    Command.is = is;\n})(Command || (Command = {}));\n/**\n * The TextEdit namespace provides helper function to create replace,\n * insert and delete edits more easily.\n */\nexport var TextEdit;\n(function (TextEdit) {\n    /**\n     * Creates a replace text edit.\n     * @param range The range of text to be replaced.\n     * @param newText The new text.\n     */\n    function replace(range, newText) {\n        return { range: range, newText: newText };\n    }\n    TextEdit.replace = replace;\n    /**\n     * Creates a insert text edit.\n     * @param position The position to insert the text at.\n     * @param newText The text to be inserted.\n     */\n    function insert(position, newText) {\n        return { range: { start: position, end: position }, newText: newText };\n    }\n    TextEdit.insert = insert;\n    /**\n     * Creates a delete text edit.\n     * @param range The range of text to be deleted.\n     */\n    function del(range) {\n        return { range: range, newText: '' };\n    }\n    TextEdit.del = del;\n})(TextEdit || (TextEdit = {}));\n/**\n * The TextDocumentEdit namespace provides helper function to create\n * an edit that manipulates a text document.\n */\nexport var TextDocumentEdit;\n(function (TextDocumentEdit) {\n    /**\n     * Creates a new `TextDocumentEdit`\n     */\n    function create(textDocument, edits) {\n        return { textDocument: textDocument, edits: edits };\n    }\n    TextDocumentEdit.create = create;\n    function is(value) {\n        var candidate = value;\n        return Is.defined(candidate)\n            && VersionedTextDocumentIdentifier.is(candidate.textDocument)\n            && Array.isArray(candidate.edits);\n    }\n    TextDocumentEdit.is = is;\n})(TextDocumentEdit || (TextDocumentEdit = {}));\nvar TextEditChangeImpl = /** @class */ (function () {\n    function TextEditChangeImpl(edits) {\n        this.edits = edits;\n    }\n    TextEditChangeImpl.prototype.insert = function (position, newText) {\n        this.edits.push(TextEdit.insert(position, newText));\n    };\n    TextEditChangeImpl.prototype.replace = function (range, newText) {\n        this.edits.push(TextEdit.replace(range, newText));\n    };\n    TextEditChangeImpl.prototype.delete = function (range) {\n        this.edits.push(TextEdit.del(range));\n    };\n    TextEditChangeImpl.prototype.add = function (edit) {\n        this.edits.push(edit);\n    };\n    TextEditChangeImpl.prototype.all = function () {\n        return this.edits;\n    };\n    TextEditChangeImpl.prototype.clear = function () {\n        this.edits.splice(0, this.edits.length);\n    };\n    return TextEditChangeImpl;\n}());\n/**\n * A workspace change helps constructing changes to a workspace.\n */\nvar WorkspaceChange = /** @class */ (function () {\n    function WorkspaceChange(workspaceEdit) {\n        var _this = this;\n        this._textEditChanges = Object.create(null);\n        if (workspaceEdit) {\n            this._workspaceEdit = workspaceEdit;\n            if (workspaceEdit.documentChanges) {\n                workspaceEdit.documentChanges.forEach(function (textDocumentEdit) {\n                    var textEditChange = new TextEditChangeImpl(textDocumentEdit.edits);\n                    _this._textEditChanges[textDocumentEdit.textDocument.uri] = textEditChange;\n                });\n            }\n            else if (workspaceEdit.changes) {\n                Object.keys(workspaceEdit.changes).forEach(function (key) {\n                    var textEditChange = new TextEditChangeImpl(workspaceEdit.changes[key]);\n                    _this._textEditChanges[key] = textEditChange;\n                });\n            }\n        }\n    }\n    Object.defineProperty(WorkspaceChange.prototype, \"edit\", {\n        /**\n         * Returns the underlying [WorkspaceEdit](#WorkspaceEdit) literal\n         * use to be returned from a workspace edit operation like rename.\n         */\n        get: function () {\n            return this._workspaceEdit;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    WorkspaceChange.prototype.getTextEditChange = function (key) {\n        if (VersionedTextDocumentIdentifier.is(key)) {\n            if (!this._workspaceEdit) {\n                this._workspaceEdit = {\n                    documentChanges: []\n                };\n            }\n            if (!this._workspaceEdit.documentChanges) {\n                throw new Error('Workspace edit is not configured for versioned document changes.');\n            }\n            var textDocument = key;\n            var result = this._textEditChanges[textDocument.uri];\n            if (!result) {\n                var edits = [];\n                var textDocumentEdit = {\n                    textDocument: textDocument,\n                    edits: edits\n                };\n                this._workspaceEdit.documentChanges.push(textDocumentEdit);\n                result = new TextEditChangeImpl(edits);\n                this._textEditChanges[textDocument.uri] = result;\n            }\n            return result;\n        }\n        else {\n            if (!this._workspaceEdit) {\n                this._workspaceEdit = {\n                    changes: Object.create(null)\n                };\n            }\n            if (!this._workspaceEdit.changes) {\n                throw new Error('Workspace edit is not configured for normal text edit changes.');\n            }\n            var result = this._textEditChanges[key];\n            if (!result) {\n                var edits = [];\n                this._workspaceEdit.changes[key] = edits;\n                result = new TextEditChangeImpl(edits);\n                this._textEditChanges[key] = result;\n            }\n            return result;\n        }\n    };\n    return WorkspaceChange;\n}());\nexport { WorkspaceChange };\n/**\n * The TextDocumentIdentifier namespace provides helper functions to work with\n * [TextDocumentIdentifier](#TextDocumentIdentifier) literals.\n */\nexport var TextDocumentIdentifier;\n(function (TextDocumentIdentifier) {\n    /**\n     * Creates a new TextDocumentIdentifier literal.\n     * @param uri The document's uri.\n     */\n    function create(uri) {\n        return { uri: uri };\n    }\n    TextDocumentIdentifier.create = create;\n    /**\n     * Checks whether the given literal conforms to the [TextDocumentIdentifier](#TextDocumentIdentifier) interface.\n     */\n    function is(value) {\n        var candidate = value;\n        return Is.defined(candidate) && Is.string(candidate.uri);\n    }\n    TextDocumentIdentifier.is = is;\n})(TextDocumentIdentifier || (TextDocumentIdentifier = {}));\n/**\n * The VersionedTextDocumentIdentifier namespace provides helper functions to work with\n * [VersionedTextDocumentIdentifier](#VersionedTextDocumentIdentifier) literals.\n */\nexport var VersionedTextDocumentIdentifier;\n(function (VersionedTextDocumentIdentifier) {\n    /**\n     * Creates a new VersionedTextDocumentIdentifier literal.\n     * @param uri The document's uri.\n     * @param uri The document's text.\n     */\n    function create(uri, version) {\n        return { uri: uri, version: version };\n    }\n    VersionedTextDocumentIdentifier.create = create;\n    /**\n     * Checks whether the given literal conforms to the [VersionedTextDocumentIdentifier](#VersionedTextDocumentIdentifier) interface.\n     */\n    function is(value) {\n        var candidate = value;\n        return Is.defined(candidate) && Is.string(candidate.uri) && Is.number(candidate.version);\n    }\n    VersionedTextDocumentIdentifier.is = is;\n})(VersionedTextDocumentIdentifier || (VersionedTextDocumentIdentifier = {}));\n/**\n * The TextDocumentItem namespace provides helper functions to work with\n * [TextDocumentItem](#TextDocumentItem) literals.\n */\nexport var TextDocumentItem;\n(function (TextDocumentItem) {\n    /**\n     * Creates a new TextDocumentItem literal.\n     * @param uri The document's uri.\n     * @param languageId The document's language identifier.\n     * @param version The document's version number.\n     * @param text The document's text.\n     */\n    function create(uri, languageId, version, text) {\n        return { uri: uri, languageId: languageId, version: version, text: text };\n    }\n    TextDocumentItem.create = create;\n    /**\n     * Checks whether the given literal conforms to the [TextDocumentItem](#TextDocumentItem) interface.\n     */\n    function is(value) {\n        var candidate = value;\n        return Is.defined(candidate) && Is.string(candidate.uri) && Is.string(candidate.languageId) && Is.number(candidate.version) && Is.string(candidate.text);\n    }\n    TextDocumentItem.is = is;\n})(TextDocumentItem || (TextDocumentItem = {}));\n/**\n * Describes the content type that a client supports in various\n * result literals like `Hover`, `ParameterInfo` or `CompletionItem`.\n *\n * Please note that `MarkupKinds` must not start with a `$`. This kinds\n * are reserved for internal usage.\n */\nexport var MarkupKind;\n(function (MarkupKind) {\n    /**\n     * Plain text is supported as a content format\n     */\n    MarkupKind.PlainText = 'plaintext';\n    /**\n     * Markdown is supported as a content format\n     */\n    MarkupKind.Markdown = 'markdown';\n})(MarkupKind || (MarkupKind = {}));\n/**\n * The kind of a completion entry.\n */\nexport var CompletionItemKind;\n(function (CompletionItemKind) {\n    CompletionItemKind.Text = 1;\n    CompletionItemKind.Method = 2;\n    CompletionItemKind.Function = 3;\n    CompletionItemKind.Constructor = 4;\n    CompletionItemKind.Field = 5;\n    CompletionItemKind.Variable = 6;\n    CompletionItemKind.Class = 7;\n    CompletionItemKind.Interface = 8;\n    CompletionItemKind.Module = 9;\n    CompletionItemKind.Property = 10;\n    CompletionItemKind.Unit = 11;\n    CompletionItemKind.Value = 12;\n    CompletionItemKind.Enum = 13;\n    CompletionItemKind.Keyword = 14;\n    CompletionItemKind.Snippet = 15;\n    CompletionItemKind.Color = 16;\n    CompletionItemKind.File = 17;\n    CompletionItemKind.Reference = 18;\n    CompletionItemKind.Folder = 19;\n    CompletionItemKind.EnumMember = 20;\n    CompletionItemKind.Constant = 21;\n    CompletionItemKind.Struct = 22;\n    CompletionItemKind.Event = 23;\n    CompletionItemKind.Operator = 24;\n    CompletionItemKind.TypeParameter = 25;\n})(CompletionItemKind || (CompletionItemKind = {}));\n/**\n * Defines whether the insert text in a completion item should be interpreted as\n * plain text or a snippet.\n */\nexport var InsertTextFormat;\n(function (InsertTextFormat) {\n    /**\n     * The primary text to be inserted is treated as a plain string.\n     */\n    InsertTextFormat.PlainText = 1;\n    /**\n     * The primary text to be inserted is treated as a snippet.\n     *\n     * A snippet can define tab stops and placeholders with `$1`, `$2`\n     * and `${3:foo}`. `$0` defines the final tab stop, it defaults to\n     * the end of the snippet. Placeholders with equal identifiers are linked,\n     * that is typing in one will update others too.\n     *\n     * See also: https://github.com/Microsoft/vscode/blob/master/src/vs/editor/contrib/snippet/common/snippet.md\n     */\n    InsertTextFormat.Snippet = 2;\n})(InsertTextFormat || (InsertTextFormat = {}));\n/**\n * The CompletionItem namespace provides functions to deal with\n * completion items.\n */\nexport var CompletionItem;\n(function (CompletionItem) {\n    /**\n     * Create a completion item and seed it with a label.\n     * @param label The completion item's label\n     */\n    function create(label) {\n        return { label: label };\n    }\n    CompletionItem.create = create;\n})(CompletionItem || (CompletionItem = {}));\n/**\n * The CompletionList namespace provides functions to deal with\n * completion lists.\n */\nexport var CompletionList;\n(function (CompletionList) {\n    /**\n     * Creates a new completion list.\n     *\n     * @param items The completion items.\n     * @param isIncomplete The list is not complete.\n     */\n    function create(items, isIncomplete) {\n        return { items: items ? items : [], isIncomplete: !!isIncomplete };\n    }\n    CompletionList.create = create;\n})(CompletionList || (CompletionList = {}));\nexport var MarkedString;\n(function (MarkedString) {\n    /**\n     * Creates a marked string from plain text.\n     *\n     * @param plainText The plain text.\n     */\n    function fromPlainText(plainText) {\n        return plainText.replace(/[\\\\`*_{}[\\]()#+\\-.!]/g, \"\\\\$&\"); // escape markdown syntax tokens: http://daringfireball.net/projects/markdown/syntax#backslash\n    }\n    MarkedString.fromPlainText = fromPlainText;\n})(MarkedString || (MarkedString = {}));\n/**\n * The ParameterInformation namespace provides helper functions to work with\n * [ParameterInformation](#ParameterInformation) literals.\n */\nexport var ParameterInformation;\n(function (ParameterInformation) {\n    /**\n     * Creates a new parameter information literal.\n     *\n     * @param label A label string.\n     * @param documentation A doc string.\n     */\n    function create(label, documentation) {\n        return documentation ? { label: label, documentation: documentation } : { label: label };\n    }\n    ParameterInformation.create = create;\n    ;\n})(ParameterInformation || (ParameterInformation = {}));\n/**\n * The SignatureInformation namespace provides helper functions to work with\n * [SignatureInformation](#SignatureInformation) literals.\n */\nexport var SignatureInformation;\n(function (SignatureInformation) {\n    function create(label, documentation) {\n        var parameters = [];\n        for (var _i = 2; _i < arguments.length; _i++) {\n            parameters[_i - 2] = arguments[_i];\n        }\n        var result = { label: label };\n        if (Is.defined(documentation)) {\n            result.documentation = documentation;\n        }\n        if (Is.defined(parameters)) {\n            result.parameters = parameters;\n        }\n        else {\n            result.parameters = [];\n        }\n        return result;\n    }\n    SignatureInformation.create = create;\n})(SignatureInformation || (SignatureInformation = {}));\n/**\n * A document highlight kind.\n */\nexport var DocumentHighlightKind;\n(function (DocumentHighlightKind) {\n    /**\n     * A textual occurrance.\n     */\n    DocumentHighlightKind.Text = 1;\n    /**\n     * Read-access of a symbol, like reading a variable.\n     */\n    DocumentHighlightKind.Read = 2;\n    /**\n     * Write-access of a symbol, like writing to a variable.\n     */\n    DocumentHighlightKind.Write = 3;\n})(DocumentHighlightKind || (DocumentHighlightKind = {}));\n/**\n * DocumentHighlight namespace to provide helper functions to work with\n * [DocumentHighlight](#DocumentHighlight) literals.\n */\nexport var DocumentHighlight;\n(function (DocumentHighlight) {\n    /**\n     * Create a DocumentHighlight object.\n     * @param range The range the highlight applies to.\n     */\n    function create(range, kind) {\n        var result = { range: range };\n        if (Is.number(kind)) {\n            result.kind = kind;\n        }\n        return result;\n    }\n    DocumentHighlight.create = create;\n})(DocumentHighlight || (DocumentHighlight = {}));\n/**\n * A symbol kind.\n */\nexport var SymbolKind;\n(function (SymbolKind) {\n    SymbolKind.File = 1;\n    SymbolKind.Module = 2;\n    SymbolKind.Namespace = 3;\n    SymbolKind.Package = 4;\n    SymbolKind.Class = 5;\n    SymbolKind.Method = 6;\n    SymbolKind.Property = 7;\n    SymbolKind.Field = 8;\n    SymbolKind.Constructor = 9;\n    SymbolKind.Enum = 10;\n    SymbolKind.Interface = 11;\n    SymbolKind.Function = 12;\n    SymbolKind.Variable = 13;\n    SymbolKind.Constant = 14;\n    SymbolKind.String = 15;\n    SymbolKind.Number = 16;\n    SymbolKind.Boolean = 17;\n    SymbolKind.Array = 18;\n    SymbolKind.Object = 19;\n    SymbolKind.Key = 20;\n    SymbolKind.Null = 21;\n    SymbolKind.EnumMember = 22;\n    SymbolKind.Struct = 23;\n    SymbolKind.Event = 24;\n    SymbolKind.Operator = 25;\n    SymbolKind.TypeParameter = 26;\n})(SymbolKind || (SymbolKind = {}));\nexport var SymbolInformation;\n(function (SymbolInformation) {\n    /**\n     * Creates a new symbol information literal.\n     *\n     * @param name The name of the symbol.\n     * @param kind The kind of the symbol.\n     * @param range The range of the location of the symbol.\n     * @param uri The resource of the location of symbol, defaults to the current document.\n     * @param containerName The name of the symbol containg the symbol.\n     */\n    function create(name, kind, range, uri, containerName) {\n        var result = {\n            name: name,\n            kind: kind,\n            location: { uri: uri, range: range }\n        };\n        if (containerName) {\n            result.containerName = containerName;\n        }\n        return result;\n    }\n    SymbolInformation.create = create;\n})(SymbolInformation || (SymbolInformation = {}));\n/**\n * The CodeActionContext namespace provides helper functions to work with\n * [CodeActionContext](#CodeActionContext) literals.\n */\nexport var CodeActionContext;\n(function (CodeActionContext) {\n    /**\n     * Creates a new CodeActionContext literal.\n     */\n    function create(diagnostics) {\n        return { diagnostics: diagnostics };\n    }\n    CodeActionContext.create = create;\n    /**\n     * Checks whether the given literal conforms to the [CodeActionContext](#CodeActionContext) interface.\n     */\n    function is(value) {\n        var candidate = value;\n        return Is.defined(candidate) && Is.typedArray(candidate.diagnostics, Diagnostic.is);\n    }\n    CodeActionContext.is = is;\n})(CodeActionContext || (CodeActionContext = {}));\n/**\n * The CodeLens namespace provides helper functions to work with\n * [CodeLens](#CodeLens) literals.\n */\nexport var CodeLens;\n(function (CodeLens) {\n    /**\n     * Creates a new CodeLens literal.\n     */\n    function create(range, data) {\n        var result = { range: range };\n        if (Is.defined(data))\n            result.data = data;\n        return result;\n    }\n    CodeLens.create = create;\n    /**\n     * Checks whether the given literal conforms to the [CodeLens](#CodeLens) interface.\n     */\n    function is(value) {\n        var candidate = value;\n        return Is.defined(candidate) && Range.is(candidate.range) && (Is.undefined(candidate.command) || Command.is(candidate.command));\n    }\n    CodeLens.is = is;\n})(CodeLens || (CodeLens = {}));\n/**\n * The FormattingOptions namespace provides helper functions to work with\n * [FormattingOptions](#FormattingOptions) literals.\n */\nexport var FormattingOptions;\n(function (FormattingOptions) {\n    /**\n     * Creates a new FormattingOptions literal.\n     */\n    function create(tabSize, insertSpaces) {\n        return { tabSize: tabSize, insertSpaces: insertSpaces };\n    }\n    FormattingOptions.create = create;\n    /**\n     * Checks whether the given literal conforms to the [FormattingOptions](#FormattingOptions) interface.\n     */\n    function is(value) {\n        var candidate = value;\n        return Is.defined(candidate) && Is.number(candidate.tabSize) && Is.boolean(candidate.insertSpaces);\n    }\n    FormattingOptions.is = is;\n})(FormattingOptions || (FormattingOptions = {}));\n/**\n * A document link is a range in a text document that links to an internal or external resource, like another\n * text document or a web site.\n */\nvar DocumentLink = /** @class */ (function () {\n    function DocumentLink() {\n    }\n    return DocumentLink;\n}());\nexport { DocumentLink };\n/**\n * The DocumentLink namespace provides helper functions to work with\n * [DocumentLink](#DocumentLink) literals.\n */\n(function (DocumentLink) {\n    /**\n     * Creates a new DocumentLink literal.\n     */\n    function create(range, target) {\n        return { range: range, target: target };\n    }\n    DocumentLink.create = create;\n    /**\n     * Checks whether the given literal conforms to the [DocumentLink](#DocumentLink) interface.\n     */\n    function is(value) {\n        var candidate = value;\n        return Is.defined(candidate) && Range.is(candidate.range) && (Is.undefined(candidate.target) || Is.string(candidate.target));\n    }\n    DocumentLink.is = is;\n})(DocumentLink || (DocumentLink = {}));\nexport var EOL = ['\\n', '\\r\\n', '\\r'];\nexport var TextDocument;\n(function (TextDocument) {\n    /**\n     * Creates a new ITextDocument literal from the given uri and content.\n     * @param uri The document's uri.\n     * @param languageId  The document's language Id.\n     * @param content The document's content.\n     */\n    function create(uri, languageId, version, content) {\n        return new FullTextDocument(uri, languageId, version, content);\n    }\n    TextDocument.create = create;\n    /**\n     * Checks whether the given literal conforms to the [ITextDocument](#ITextDocument) interface.\n     */\n    function is(value) {\n        var candidate = value;\n        return Is.defined(candidate) && Is.string(candidate.uri) && (Is.undefined(candidate.languageId) || Is.string(candidate.languageId)) && Is.number(candidate.lineCount)\n            && Is.func(candidate.getText) && Is.func(candidate.positionAt) && Is.func(candidate.offsetAt) ? true : false;\n    }\n    TextDocument.is = is;\n    function applyEdits(document, edits) {\n        var text = document.getText();\n        var sortedEdits = mergeSort(edits, function (a, b) {\n            var diff = a.range.start.line - b.range.start.line;\n            if (diff === 0) {\n                return a.range.start.character - b.range.start.character;\n            }\n            return 0;\n        });\n        var lastModifiedOffset = text.length;\n        for (var i = sortedEdits.length - 1; i >= 0; i--) {\n            var e = sortedEdits[i];\n            var startOffset = document.offsetAt(e.range.start);\n            var endOffset = document.offsetAt(e.range.end);\n            if (endOffset <= lastModifiedOffset) {\n                text = text.substring(0, startOffset) + e.newText + text.substring(endOffset, text.length);\n            }\n            else {\n                throw new Error('Ovelapping edit');\n            }\n            lastModifiedOffset = startOffset;\n        }\n        return text;\n    }\n    TextDocument.applyEdits = applyEdits;\n    function mergeSort(data, compare) {\n        if (data.length <= 1) {\n            // sorted\n            return data;\n        }\n        var p = (data.length / 2) | 0;\n        var left = data.slice(0, p);\n        var right = data.slice(p);\n        mergeSort(left, compare);\n        mergeSort(right, compare);\n        var leftIdx = 0;\n        var rightIdx = 0;\n        var i = 0;\n        while (leftIdx < left.length && rightIdx < right.length) {\n            var ret = compare(left[leftIdx], right[rightIdx]);\n            if (ret <= 0) {\n                // smaller_equal -> take left to preserve order\n                data[i++] = left[leftIdx++];\n            }\n            else {\n                // greater -> take right\n                data[i++] = right[rightIdx++];\n            }\n        }\n        while (leftIdx < left.length) {\n            data[i++] = left[leftIdx++];\n        }\n        while (rightIdx < right.length) {\n            data[i++] = right[rightIdx++];\n        }\n        return data;\n    }\n})(TextDocument || (TextDocument = {}));\n/**\n * Represents reasons why a text document is saved.\n */\nexport var TextDocumentSaveReason;\n(function (TextDocumentSaveReason) {\n    /**\n     * Manually triggered, e.g. by the user pressing save, by starting debugging,\n     * or by an API call.\n     */\n    TextDocumentSaveReason.Manual = 1;\n    /**\n     * Automatic after a delay.\n     */\n    TextDocumentSaveReason.AfterDelay = 2;\n    /**\n     * When the editor lost focus.\n     */\n    TextDocumentSaveReason.FocusOut = 3;\n})(TextDocumentSaveReason || (TextDocumentSaveReason = {}));\nvar FullTextDocument = /** @class */ (function () {\n    function FullTextDocument(uri, languageId, version, content) {\n        this._uri = uri;\n        this._languageId = languageId;\n        this._version = version;\n        this._content = content;\n        this._lineOffsets = null;\n    }\n    Object.defineProperty(FullTextDocument.prototype, \"uri\", {\n        get: function () {\n            return this._uri;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FullTextDocument.prototype, \"languageId\", {\n        get: function () {\n            return this._languageId;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FullTextDocument.prototype, \"version\", {\n        get: function () {\n            return this._version;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    FullTextDocument.prototype.getText = function (range) {\n        if (range) {\n            var start = this.offsetAt(range.start);\n            var end = this.offsetAt(range.end);\n            return this._content.substring(start, end);\n        }\n        return this._content;\n    };\n    FullTextDocument.prototype.update = function (event, version) {\n        this._content = event.text;\n        this._version = version;\n        this._lineOffsets = null;\n    };\n    FullTextDocument.prototype.getLineOffsets = function () {\n        if (this._lineOffsets === null) {\n            var lineOffsets = [];\n            var text = this._content;\n            var isLineStart = true;\n            for (var i = 0; i < text.length; i++) {\n                if (isLineStart) {\n                    lineOffsets.push(i);\n                    isLineStart = false;\n                }\n                var ch = text.charAt(i);\n                isLineStart = (ch === '\\r' || ch === '\\n');\n                if (ch === '\\r' && i + 1 < text.length && text.charAt(i + 1) === '\\n') {\n                    i++;\n                }\n            }\n            if (isLineStart && text.length > 0) {\n                lineOffsets.push(text.length);\n            }\n            this._lineOffsets = lineOffsets;\n        }\n        return this._lineOffsets;\n    };\n    FullTextDocument.prototype.positionAt = function (offset) {\n        offset = Math.max(Math.min(offset, this._content.length), 0);\n        var lineOffsets = this.getLineOffsets();\n        var low = 0, high = lineOffsets.length;\n        if (high === 0) {\n            return Position.create(0, offset);\n        }\n        while (low < high) {\n            var mid = Math.floor((low + high) / 2);\n            if (lineOffsets[mid] > offset) {\n                high = mid;\n            }\n            else {\n                low = mid + 1;\n            }\n        }\n        // low is the least x for which the line offset is larger than the current offset\n        // or array.length if no line offset is larger than the current offset\n        var line = low - 1;\n        return Position.create(line, offset - lineOffsets[line]);\n    };\n    FullTextDocument.prototype.offsetAt = function (position) {\n        var lineOffsets = this.getLineOffsets();\n        if (position.line >= lineOffsets.length) {\n            return this._content.length;\n        }\n        else if (position.line < 0) {\n            return 0;\n        }\n        var lineOffset = lineOffsets[position.line];\n        var nextLineOffset = (position.line + 1 < lineOffsets.length) ? lineOffsets[position.line + 1] : this._content.length;\n        return Math.max(Math.min(lineOffset + position.character, nextLineOffset), lineOffset);\n    };\n    Object.defineProperty(FullTextDocument.prototype, \"lineCount\", {\n        get: function () {\n            return this.getLineOffsets().length;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return FullTextDocument;\n}());\nvar Is;\n(function (Is) {\n    var toString = Object.prototype.toString;\n    function defined(value) {\n        return typeof value !== 'undefined';\n    }\n    Is.defined = defined;\n    function undefined(value) {\n        return typeof value === 'undefined';\n    }\n    Is.undefined = undefined;\n    function boolean(value) {\n        return value === true || value === false;\n    }\n    Is.boolean = boolean;\n    function string(value) {\n        return toString.call(value) === '[object String]';\n    }\n    Is.string = string;\n    function number(value) {\n        return toString.call(value) === '[object Number]';\n    }\n    Is.number = number;\n    function func(value) {\n        return toString.call(value) === '[object Function]';\n    }\n    Is.func = func;\n    function typedArray(value, check) {\n        return Array.isArray(value) && value.every(check);\n    }\n    Is.typedArray = typedArray;\n})(Is || (Is = {}));\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/monaco-editor/esm/vs/language/json/_deps/vscode-languageserver-types/main.js\n// module id = 895\n// module chunks = 2","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\nimport * as json from './_deps/jsonc-parser/main.js';\nexport function createTokenizationSupport(supportComments) {\n    return {\n        getInitialState: function () { return new JSONState(null, null, false); },\n        tokenize: function (line, state, offsetDelta, stopAtOffset) { return tokenize(supportComments, line, state, offsetDelta, stopAtOffset); }\n    };\n}\nexport var TOKEN_DELIM_OBJECT = 'delimiter.bracket.json';\nexport var TOKEN_DELIM_ARRAY = 'delimiter.array.json';\nexport var TOKEN_DELIM_COLON = 'delimiter.colon.json';\nexport var TOKEN_DELIM_COMMA = 'delimiter.comma.json';\nexport var TOKEN_VALUE_BOOLEAN = 'keyword.json';\nexport var TOKEN_VALUE_NULL = 'keyword.json';\nexport var TOKEN_VALUE_STRING = 'string.value.json';\nexport var TOKEN_VALUE_NUMBER = 'number.json';\nexport var TOKEN_PROPERTY_NAME = 'string.key.json';\nexport var TOKEN_COMMENT_BLOCK = 'comment.block.json';\nexport var TOKEN_COMMENT_LINE = 'comment.line.json';\nvar JSONState = /** @class */ (function () {\n    function JSONState(state, scanError, lastWasColon) {\n        this._state = state;\n        this.scanError = scanError;\n        this.lastWasColon = lastWasColon;\n    }\n    JSONState.prototype.clone = function () {\n        return new JSONState(this._state, this.scanError, this.lastWasColon);\n    };\n    JSONState.prototype.equals = function (other) {\n        if (other === this) {\n            return true;\n        }\n        if (!other || !(other instanceof JSONState)) {\n            return false;\n        }\n        return this.scanError === other.scanError &&\n            this.lastWasColon === other.lastWasColon;\n    };\n    JSONState.prototype.getStateData = function () {\n        return this._state;\n    };\n    JSONState.prototype.setStateData = function (state) {\n        this._state = state;\n    };\n    return JSONState;\n}());\nfunction tokenize(comments, line, state, offsetDelta, stopAtOffset) {\n    if (offsetDelta === void 0) { offsetDelta = 0; }\n    // handle multiline strings and block comments\n    var numberOfInsertedCharacters = 0, adjustOffset = false;\n    switch (state.scanError) {\n        case 2 /* UnexpectedEndOfString */:\n            line = '\"' + line;\n            numberOfInsertedCharacters = 1;\n            break;\n        case 1 /* UnexpectedEndOfComment */:\n            line = '/*' + line;\n            numberOfInsertedCharacters = 2;\n            break;\n    }\n    var scanner = json.createScanner(line), kind, ret, lastWasColon = state.lastWasColon;\n    ret = {\n        tokens: [],\n        endState: state.clone()\n    };\n    while (true) {\n        var offset = offsetDelta + scanner.getPosition(), type = '';\n        kind = scanner.scan();\n        if (kind === 17 /* EOF */) {\n            break;\n        }\n        // Check that the scanner has advanced\n        if (offset === offsetDelta + scanner.getPosition()) {\n            throw new Error('Scanner did not advance, next 3 characters are: ' + line.substr(scanner.getPosition(), 3));\n        }\n        // In case we inserted /* or \" character, we need to\n        // adjust the offset of all tokens (except the first)\n        if (adjustOffset) {\n            offset -= numberOfInsertedCharacters;\n        }\n        adjustOffset = numberOfInsertedCharacters > 0;\n        // brackets and type\n        switch (kind) {\n            case 1 /* OpenBraceToken */:\n                type = TOKEN_DELIM_OBJECT;\n                lastWasColon = false;\n                break;\n            case 2 /* CloseBraceToken */:\n                type = TOKEN_DELIM_OBJECT;\n                lastWasColon = false;\n                break;\n            case 3 /* OpenBracketToken */:\n                type = TOKEN_DELIM_ARRAY;\n                lastWasColon = false;\n                break;\n            case 4 /* CloseBracketToken */:\n                type = TOKEN_DELIM_ARRAY;\n                lastWasColon = false;\n                break;\n            case 6 /* ColonToken */:\n                type = TOKEN_DELIM_COLON;\n                lastWasColon = true;\n                break;\n            case 5 /* CommaToken */:\n                type = TOKEN_DELIM_COMMA;\n                lastWasColon = false;\n                break;\n            case 8 /* TrueKeyword */:\n            case 9 /* FalseKeyword */:\n                type = TOKEN_VALUE_BOOLEAN;\n                lastWasColon = false;\n                break;\n            case 7 /* NullKeyword */:\n                type = TOKEN_VALUE_NULL;\n                lastWasColon = false;\n                break;\n            case 10 /* StringLiteral */:\n                type = lastWasColon ? TOKEN_VALUE_STRING : TOKEN_PROPERTY_NAME;\n                lastWasColon = false;\n                break;\n            case 11 /* NumericLiteral */:\n                type = TOKEN_VALUE_NUMBER;\n                lastWasColon = false;\n                break;\n        }\n        // comments, iff enabled\n        if (comments) {\n            switch (kind) {\n                case 12 /* LineCommentTrivia */:\n                    type = TOKEN_COMMENT_LINE;\n                    break;\n                case 13 /* BlockCommentTrivia */:\n                    type = TOKEN_COMMENT_BLOCK;\n                    break;\n            }\n        }\n        ret.endState = new JSONState(state.getStateData(), scanner.getTokenError(), lastWasColon);\n        ret.tokens.push({\n            startIndex: offset,\n            scopes: type\n        });\n    }\n    return ret;\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/monaco-editor/esm/vs/language/json/tokenization.js\n// module id = 896\n// module chunks = 2","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\nimport * as formatter from './impl/format.js';\nimport * as edit from './impl/edit.js';\nimport * as scanner from './impl/scanner.js';\nimport * as parser from './impl/parser.js';\n/**\n * Creates a JSON scanner on the given text.\n * If ignoreTrivia is set, whitespaces or comments are ignored.\n */\nexport var createScanner = scanner.createScanner;\n/**\n * For a given offset, evaluate the location in the JSON document. Each segment in the location path is either a property name or an array index.\n */\nexport var getLocation = parser.getLocation;\n/**\n * Parses the given text and returns the object the JSON content represents. On invalid input, the parser tries to be as fault tolerant as possible, but still return a result.\n * Therefore always check the errors list to find out if the input was valid.\n */\nexport var parse = parser.parse;\n/**\n * Parses the given text and returns a tree representation the JSON content. On invalid input, the parser tries to be as fault tolerant as possible, but still return a result.\n */\nexport var parseTree = parser.parseTree;\n/**\n * Finds the node at the given path in a JSON DOM.\n */\nexport var findNodeAtLocation = parser.findNodeAtLocation;\n/**\n * Evaluates the JavaScript object of the given JSON DOM node\n */\nexport var getNodeValue = parser.getNodeValue;\n/**\n * Parses the given text and invokes the visitor functions for each object, array and literal reached.\n */\nexport var visit = parser.visit;\n/**\n * Takes JSON with JavaScript-style comments and remove\n * them. Optionally replaces every none-newline character\n * of comments with a replaceCharacter\n */\nexport var stripComments = parser.stripComments;\n/**\n * Computes the edits needed to format a JSON document.\n *\n * @param documentText The input text\n * @param range The range to format or `undefined` to format the full content\n * @param options The formatting options\n * @returns A list of edit operations describing the formatting changes to the original document. Edits can be either inserts, replacements or\n * removals of text segments. All offsets refer to the original state of the document. No two edits must change or remove the same range of\n * text in the original document. However, multiple edits can have\n * the same offset, for example multiple inserts, or an insert followed by a remove or replace. The order in the array defines which edit is applied first.\n * To apply edits to an input, you can use `applyEdits`\n */\nexport function format(documentText, range, options) {\n    return formatter.format(documentText, range, options);\n}\n/**\n * Computes the edits needed to modify a value in the JSON document.\n *\n * @param documentText The input text\n * @param path The path of the value to change. The path represents either to the document root, a property or an array item.\n * If the path points to an non-existing property or item, it will be created.\n * @param value The new value for the specified property or item. If the value is undefined,\n * the property or item will be removed.\n * @param options Options\n * @returns A list of edit operations describing the formatting changes to the original document. Edits can be either inserts, replacements or\n * removals of text segments. All offsets refer to the original state of the document. No two edits must change or remove the same range of\n * text in the original document. However, multiple edits can have\n * the same offset, for example multiple inserts, or an insert followed by a remove or replace. The order in the array defines which edit is applied first.\n * To apply edits to an input, you can use `applyEdits`\n */\nexport function modify(text, path, value, options) {\n    return edit.setProperty(text, path, value, options.formattingOptions, options.getInsertionIndex);\n}\n/**\n * Applies edits to a input string.\n */\nexport function applyEdits(text, edits) {\n    for (var i = edits.length - 1; i >= 0; i--) {\n        text = edit.applyEdit(text, edits[i]);\n    }\n    return text;\n}\n//# sourceMappingURL=main.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/monaco-editor/esm/vs/language/json/_deps/jsonc-parser/main.js\n// module id = 897\n// module chunks = 2","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\nimport { format, isEOL } from './format.js';\nimport { parseTree, findNodeAtLocation } from './parser.js';\nexport function removeProperty(text, path, formattingOptions) {\n    return setProperty(text, path, void 0, formattingOptions);\n}\nexport function setProperty(text, path, value, formattingOptions, getInsertionIndex) {\n    var errors = [];\n    var root = parseTree(text, errors);\n    var parent = void 0;\n    var lastSegment = void 0;\n    while (path.length > 0) {\n        lastSegment = path.pop();\n        parent = findNodeAtLocation(root, path);\n        if (parent === void 0 && value !== void 0) {\n            if (typeof lastSegment === 'string') {\n                value = (_a = {}, _a[lastSegment] = value, _a);\n            }\n            else {\n                value = [value];\n            }\n        }\n        else {\n            break;\n        }\n    }\n    if (!parent) {\n        // empty document\n        if (value === void 0) {\n            throw new Error('Can not delete in empty document');\n        }\n        return withFormatting(text, { offset: root ? root.offset : 0, length: root ? root.length : 0, content: JSON.stringify(value) }, formattingOptions);\n    }\n    else if (parent.type === 'object' && typeof lastSegment === 'string' && Array.isArray(parent.children)) {\n        var existing = findNodeAtLocation(parent, [lastSegment]);\n        if (existing !== void 0) {\n            if (value === void 0) {\n                if (!existing.parent) {\n                    throw new Error('Malformed AST');\n                }\n                var propertyIndex = parent.children.indexOf(existing.parent);\n                var removeBegin = void 0;\n                var removeEnd = existing.parent.offset + existing.parent.length;\n                if (propertyIndex > 0) {\n                    // remove the comma of the previous node\n                    var previous = parent.children[propertyIndex - 1];\n                    removeBegin = previous.offset + previous.length;\n                }\n                else {\n                    removeBegin = parent.offset + 1;\n                    if (parent.children.length > 1) {\n                        // remove the comma of the next node\n                        var next = parent.children[1];\n                        removeEnd = next.offset;\n                    }\n                }\n                return withFormatting(text, { offset: removeBegin, length: removeEnd - removeBegin, content: '' }, formattingOptions);\n            }\n            else {\n                // set value of existing property\n                return withFormatting(text, { offset: existing.offset, length: existing.length, content: JSON.stringify(value) }, formattingOptions);\n            }\n        }\n        else {\n            if (value === void 0) {\n                return []; // property does not exist, nothing to do\n            }\n            var newProperty = JSON.stringify(lastSegment) + \": \" + JSON.stringify(value);\n            var index = getInsertionIndex ? getInsertionIndex(parent.children.map(function (p) { return p.children[0].value; })) : parent.children.length;\n            var edit = void 0;\n            if (index > 0) {\n                var previous = parent.children[index - 1];\n                edit = { offset: previous.offset + previous.length, length: 0, content: ',' + newProperty };\n            }\n            else if (parent.children.length === 0) {\n                edit = { offset: parent.offset + 1, length: 0, content: newProperty };\n            }\n            else {\n                edit = { offset: parent.offset + 1, length: 0, content: newProperty + ',' };\n            }\n            return withFormatting(text, edit, formattingOptions);\n        }\n    }\n    else if (parent.type === 'array' && typeof lastSegment === 'number' && Array.isArray(parent.children)) {\n        var insertIndex = lastSegment;\n        if (insertIndex === -1) {\n            // Insert\n            var newProperty = \"\" + JSON.stringify(value);\n            var edit = void 0;\n            if (parent.children.length === 0) {\n                edit = { offset: parent.offset + 1, length: 0, content: newProperty };\n            }\n            else {\n                var previous = parent.children[parent.children.length - 1];\n                edit = { offset: previous.offset + previous.length, length: 0, content: ',' + newProperty };\n            }\n            return withFormatting(text, edit, formattingOptions);\n        }\n        else {\n            if (value === void 0 && parent.children.length >= 0) {\n                //Removal\n                var removalIndex = lastSegment;\n                var toRemove = parent.children[removalIndex];\n                var edit = void 0;\n                if (parent.children.length === 1) {\n                    // only item\n                    edit = { offset: parent.offset + 1, length: parent.length - 2, content: '' };\n                }\n                else if (parent.children.length - 1 === removalIndex) {\n                    // last item\n                    var previous = parent.children[removalIndex - 1];\n                    var offset = previous.offset + previous.length;\n                    var parentEndOffset = parent.offset + parent.length;\n                    edit = { offset: offset, length: parentEndOffset - 2 - offset, content: '' };\n                }\n                else {\n                    edit = { offset: toRemove.offset, length: parent.children[removalIndex + 1].offset - toRemove.offset, content: '' };\n                }\n                return withFormatting(text, edit, formattingOptions);\n            }\n            else {\n                throw new Error('Array modification not supported yet');\n            }\n        }\n    }\n    else {\n        throw new Error(\"Can not add \" + (typeof lastSegment !== 'number' ? 'index' : 'property') + \" to parent of type \" + parent.type);\n    }\n    var _a;\n}\nfunction withFormatting(text, edit, formattingOptions) {\n    // apply the edit\n    var newText = applyEdit(text, edit);\n    // format the new text\n    var begin = edit.offset;\n    var end = edit.offset + edit.content.length;\n    if (edit.length === 0 || edit.content.length === 0) {\n        while (begin > 0 && !isEOL(newText, begin - 1)) {\n            begin--;\n        }\n        while (end < newText.length && !isEOL(newText, end)) {\n            end++;\n        }\n    }\n    var edits = format(newText, { offset: begin, length: end - begin }, formattingOptions);\n    // apply the formatting edits and track the begin and end offsets of the changes\n    for (var i = edits.length - 1; i >= 0; i--) {\n        var edit_1 = edits[i];\n        newText = applyEdit(newText, edit_1);\n        begin = Math.min(begin, edit_1.offset);\n        end = Math.max(end, edit_1.offset + edit_1.length);\n        end += edit_1.content.length - edit_1.length;\n    }\n    // create a single edit with all changes\n    var editLength = text.length - (newText.length - end) - begin;\n    return [{ offset: begin, length: editLength, content: newText.substring(begin, end) }];\n}\nexport function applyEdit(text, edit) {\n    return text.substring(0, edit.offset) + edit.content + text.substring(edit.offset + edit.length);\n}\nexport function isWS(text, offset) {\n    return '\\r\\n \\t'.indexOf(text.charAt(offset)) !== -1;\n}\n//# sourceMappingURL=edit.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/monaco-editor/esm/vs/language/json/_deps/jsonc-parser/impl/edit.js\n// module id = 898\n// module chunks = 2"],"sourceRoot":""}